<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/AWSDynamoDBLocalSecondaryIndex.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/AWSDynamoDBLocalSecondaryIndex</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Represents the properties of a local secondary index.&lt;/p&gt;
Required parameters: [IndexName, KeySchema, Projection]</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
            
			
			<NodeRef refid="400"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSDynamoDBLocalSecondaryIndex/setIndexName:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The name of the local secondary index. The name must be unique among all other indexes on this table.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *indexName</Declaration>
			
			
			<Anchor>//api/name/indexName</Anchor>
            <NodeRef refid="400"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSDynamoDBLocalSecondaryIndex/indexName</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The name of the local secondary index. The name must be unique among all other indexes on this table.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *indexName</Declaration>
			
			
			<Anchor>//api/name/indexName</Anchor>
            <NodeRef refid="400"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSDynamoDBLocalSecondaryIndex/indexName</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The name of the local secondary index. The name must be unique among all other indexes on this table.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *indexName</Declaration>
			
			
			<Anchor>//api/name/indexName</Anchor>
            <NodeRef refid="400"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSDynamoDBLocalSecondaryIndex/setKeySchema:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The complete key schema for the local secondary index, consisting of one or more pairs of attribute names and key types:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;HASH&lt;/code&gt; - partition key&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;RANGE&lt;/code&gt; - sort key&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;note&gt;&lt;p&gt;The partition key of an item is also known as its &lt;i&gt;hash attribute&lt;/i&gt;. The term &quot;hash attribute&quot; derives from DynamoDB&apos; usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.&lt;/p&gt;&lt;p&gt;The sort key of an item is also known as its &lt;i&gt;range attribute&lt;/i&gt;. The term &quot;range attribute&quot; derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.&lt;/p&gt;&lt;/note&gt;</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSArray&lt;AWSDynamoDBKeySchemaElement*&gt; *keySchema</Declaration>
			
			
			<Anchor>//api/name/keySchema</Anchor>
            <NodeRef refid="400"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSDynamoDBLocalSecondaryIndex/keySchema</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The complete key schema for the local secondary index, consisting of one or more pairs of attribute names and key types:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;HASH&lt;/code&gt; - partition key&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;RANGE&lt;/code&gt; - sort key&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;note&gt;&lt;p&gt;The partition key of an item is also known as its &lt;i&gt;hash attribute&lt;/i&gt;. The term &quot;hash attribute&quot; derives from DynamoDB&apos; usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.&lt;/p&gt;&lt;p&gt;The sort key of an item is also known as its &lt;i&gt;range attribute&lt;/i&gt;. The term &quot;range attribute&quot; derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.&lt;/p&gt;&lt;/note&gt;</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSArray&lt;AWSDynamoDBKeySchemaElement*&gt; *keySchema</Declaration>
			
			
			<Anchor>//api/name/keySchema</Anchor>
            <NodeRef refid="400"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSDynamoDBLocalSecondaryIndex/keySchema</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The complete key schema for the local secondary index, consisting of one or more pairs of attribute names and key types:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;HASH&lt;/code&gt; - partition key&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;RANGE&lt;/code&gt; - sort key&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;note&gt;&lt;p&gt;The partition key of an item is also known as its &lt;i&gt;hash attribute&lt;/i&gt;. The term &quot;hash attribute&quot; derives from DynamoDB&apos; usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.&lt;/p&gt;&lt;p&gt;The sort key of an item is also known as its &lt;i&gt;range attribute&lt;/i&gt;. The term &quot;range attribute&quot; derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.&lt;/p&gt;&lt;/note&gt;</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSArray&lt;AWSDynamoDBKeySchemaElement*&gt; *keySchema</Declaration>
			
			
			<Anchor>//api/name/keySchema</Anchor>
            <NodeRef refid="400"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSDynamoDBLocalSecondaryIndex/setProjection:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Represents attributes that are copied (projected) from the table into an index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) AWSDynamoDBProjection *projection</Declaration>
			
			
			<Anchor>//api/name/projection</Anchor>
            <NodeRef refid="400"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSDynamoDBLocalSecondaryIndex/projection</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Represents attributes that are copied (projected) from the table into an index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) AWSDynamoDBProjection *projection</Declaration>
			
			
			<Anchor>//api/name/projection</Anchor>
            <NodeRef refid="400"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSDynamoDBLocalSecondaryIndex/projection</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Represents attributes that are copied (projected) from the table into an index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) AWSDynamoDBProjection *projection</Declaration>
			
			
			<Anchor>//api/name/projection</Anchor>
            <NodeRef refid="400"/>
		</Token>
		
        
        
	</File>
</Tokens>