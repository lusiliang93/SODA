<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/AWSLambdaInvocationRequest.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/AWSLambdaInvocationRequest</TokenIdentifier>
			<Abstract type="html">&lt;p/&gt;
Required parameters: [FunctionName]</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
            
			
			<NodeRef refid="1259"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaInvocationRequest/setClientContext:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Using the &lt;code&gt;ClientContext&lt;/code&gt; you can pass client-specific information to the Lambda function you are invoking. You can then process the client information in your Lambda function as you choose through the context variable. For an example of a &lt;code&gt;ClientContext&lt;/code&gt; JSON, see PutEvents in the &lt;i&gt;Amazon Mobile Analytics API Reference and User Guide&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;The ClientContext JSON must be base64-encoded.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *clientContext</Declaration>
			
			
			<Anchor>//api/name/clientContext</Anchor>
            <NodeRef refid="1259"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaInvocationRequest/clientContext</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Using the &lt;code&gt;ClientContext&lt;/code&gt; you can pass client-specific information to the Lambda function you are invoking. You can then process the client information in your Lambda function as you choose through the context variable. For an example of a &lt;code&gt;ClientContext&lt;/code&gt; JSON, see PutEvents in the &lt;i&gt;Amazon Mobile Analytics API Reference and User Guide&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;The ClientContext JSON must be base64-encoded.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *clientContext</Declaration>
			
			
			<Anchor>//api/name/clientContext</Anchor>
            <NodeRef refid="1259"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSLambdaInvocationRequest/clientContext</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Using the &lt;code&gt;ClientContext&lt;/code&gt; you can pass client-specific information to the Lambda function you are invoking. You can then process the client information in your Lambda function as you choose through the context variable. For an example of a &lt;code&gt;ClientContext&lt;/code&gt; JSON, see PutEvents in the &lt;i&gt;Amazon Mobile Analytics API Reference and User Guide&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;The ClientContext JSON must be base64-encoded.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *clientContext</Declaration>
			
			
			<Anchor>//api/name/clientContext</Anchor>
            <NodeRef refid="1259"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaInvocationRequest/setFunctionName:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The Lambda function name.&lt;/p&gt;&lt;p&gt; You can specify a function name (for example, &lt;code&gt;Thumbnail&lt;/code&gt;) or you can specify Amazon Resource Name (ARN) of the function (for example, &lt;code&gt;arn:aws:lambda:us-west-2:account-id:function:ThumbNail&lt;/code&gt;). AWS Lambda also allows you to specify a partial ARN (for example, &lt;code&gt;account-id:Thumbnail&lt;/code&gt;). Note that the length constraint applies only to the ARN. If you specify only the function name, it is limited to 64 character in length. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *functionName</Declaration>
			
			
			<Anchor>//api/name/functionName</Anchor>
            <NodeRef refid="1259"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaInvocationRequest/functionName</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The Lambda function name.&lt;/p&gt;&lt;p&gt; You can specify a function name (for example, &lt;code&gt;Thumbnail&lt;/code&gt;) or you can specify Amazon Resource Name (ARN) of the function (for example, &lt;code&gt;arn:aws:lambda:us-west-2:account-id:function:ThumbNail&lt;/code&gt;). AWS Lambda also allows you to specify a partial ARN (for example, &lt;code&gt;account-id:Thumbnail&lt;/code&gt;). Note that the length constraint applies only to the ARN. If you specify only the function name, it is limited to 64 character in length. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *functionName</Declaration>
			
			
			<Anchor>//api/name/functionName</Anchor>
            <NodeRef refid="1259"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSLambdaInvocationRequest/functionName</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The Lambda function name.&lt;/p&gt;&lt;p&gt; You can specify a function name (for example, &lt;code&gt;Thumbnail&lt;/code&gt;) or you can specify Amazon Resource Name (ARN) of the function (for example, &lt;code&gt;arn:aws:lambda:us-west-2:account-id:function:ThumbNail&lt;/code&gt;). AWS Lambda also allows you to specify a partial ARN (for example, &lt;code&gt;account-id:Thumbnail&lt;/code&gt;). Note that the length constraint applies only to the ARN. If you specify only the function name, it is limited to 64 character in length. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *functionName</Declaration>
			
			
			<Anchor>//api/name/functionName</Anchor>
            <NodeRef refid="1259"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaInvocationRequest/setInvocationType:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;By default, the &lt;code&gt;Invoke&lt;/code&gt; API assumes &lt;code&gt;RequestResponse&lt;/code&gt; invocation type. You can optionally request asynchronous execution by specifying &lt;code&gt;Event&lt;/code&gt; as the &lt;code&gt;InvocationType&lt;/code&gt;. You can also use this parameter to request AWS Lambda to not execute the function but do some verification, such as if the caller is authorized to invoke the function and if the inputs are valid. You request this by specifying &lt;code&gt;DryRun&lt;/code&gt; as the &lt;code&gt;InvocationType&lt;/code&gt;. This is useful in a cross-account scenario when you want to verify access to a function without running it. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) AWSLambdaInvocationType invocationType</Declaration>
			
			
			<Anchor>//api/name/invocationType</Anchor>
            <NodeRef refid="1259"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaInvocationRequest/invocationType</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;By default, the &lt;code&gt;Invoke&lt;/code&gt; API assumes &lt;code&gt;RequestResponse&lt;/code&gt; invocation type. You can optionally request asynchronous execution by specifying &lt;code&gt;Event&lt;/code&gt; as the &lt;code&gt;InvocationType&lt;/code&gt;. You can also use this parameter to request AWS Lambda to not execute the function but do some verification, such as if the caller is authorized to invoke the function and if the inputs are valid. You request this by specifying &lt;code&gt;DryRun&lt;/code&gt; as the &lt;code&gt;InvocationType&lt;/code&gt;. This is useful in a cross-account scenario when you want to verify access to a function without running it. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) AWSLambdaInvocationType invocationType</Declaration>
			
			
			<Anchor>//api/name/invocationType</Anchor>
            <NodeRef refid="1259"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSLambdaInvocationRequest/invocationType</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;By default, the &lt;code&gt;Invoke&lt;/code&gt; API assumes &lt;code&gt;RequestResponse&lt;/code&gt; invocation type. You can optionally request asynchronous execution by specifying &lt;code&gt;Event&lt;/code&gt; as the &lt;code&gt;InvocationType&lt;/code&gt;. You can also use this parameter to request AWS Lambda to not execute the function but do some verification, such as if the caller is authorized to invoke the function and if the inputs are valid. You request this by specifying &lt;code&gt;DryRun&lt;/code&gt; as the &lt;code&gt;InvocationType&lt;/code&gt;. This is useful in a cross-account scenario when you want to verify access to a function without running it. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) AWSLambdaInvocationType invocationType</Declaration>
			
			
			<Anchor>//api/name/invocationType</Anchor>
            <NodeRef refid="1259"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaInvocationRequest/setLogType:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;You can set this optional parameter to &lt;code&gt;Tail&lt;/code&gt; in the request only if you specify the &lt;code&gt;InvocationType&lt;/code&gt; parameter with value &lt;code&gt;RequestResponse&lt;/code&gt;. In this case, AWS Lambda returns the base64-encoded last 4 KB of log data produced by your Lambda function in the &lt;code&gt;x-amz-log-result&lt;/code&gt; header. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) AWSLambdaLogType logType</Declaration>
			
			
			<Anchor>//api/name/logType</Anchor>
            <NodeRef refid="1259"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaInvocationRequest/logType</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;You can set this optional parameter to &lt;code&gt;Tail&lt;/code&gt; in the request only if you specify the &lt;code&gt;InvocationType&lt;/code&gt; parameter with value &lt;code&gt;RequestResponse&lt;/code&gt;. In this case, AWS Lambda returns the base64-encoded last 4 KB of log data produced by your Lambda function in the &lt;code&gt;x-amz-log-result&lt;/code&gt; header. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) AWSLambdaLogType logType</Declaration>
			
			
			<Anchor>//api/name/logType</Anchor>
            <NodeRef refid="1259"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSLambdaInvocationRequest/logType</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;You can set this optional parameter to &lt;code&gt;Tail&lt;/code&gt; in the request only if you specify the &lt;code&gt;InvocationType&lt;/code&gt; parameter with value &lt;code&gt;RequestResponse&lt;/code&gt;. In this case, AWS Lambda returns the base64-encoded last 4 KB of log data produced by your Lambda function in the &lt;code&gt;x-amz-log-result&lt;/code&gt; header. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) AWSLambdaLogType logType</Declaration>
			
			
			<Anchor>//api/name/logType</Anchor>
            <NodeRef refid="1259"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaInvocationRequest/setPayload:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;JSON that you want to provide to your Lambda function as input.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) id _Nullable payload</Declaration>
			
			
			<Anchor>//api/name/payload</Anchor>
            <NodeRef refid="1259"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaInvocationRequest/payload</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;JSON that you want to provide to your Lambda function as input.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) id _Nullable payload</Declaration>
			
			
			<Anchor>//api/name/payload</Anchor>
            <NodeRef refid="1259"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSLambdaInvocationRequest/payload</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;JSON that you want to provide to your Lambda function as input.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) id _Nullable payload</Declaration>
			
			
			<Anchor>//api/name/payload</Anchor>
            <NodeRef refid="1259"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaInvocationRequest/setQualifier:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;You can use this optional parameter to specify a Lambda function version or alias name. If you specify a function version, the API uses the qualified function ARN to invoke a specific Lambda function. If you specify an alias name, the API uses the alias ARN to invoke the Lambda function version to which the alias points.&lt;/p&gt;&lt;p&gt;If you don&apos;t provide this parameter, then the API uses unqualified function ARN which results in invocation of the &lt;code&gt;$LATEST&lt;/code&gt; version.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *qualifier</Declaration>
			
			
			<Anchor>//api/name/qualifier</Anchor>
            <NodeRef refid="1259"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaInvocationRequest/qualifier</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;You can use this optional parameter to specify a Lambda function version or alias name. If you specify a function version, the API uses the qualified function ARN to invoke a specific Lambda function. If you specify an alias name, the API uses the alias ARN to invoke the Lambda function version to which the alias points.&lt;/p&gt;&lt;p&gt;If you don&apos;t provide this parameter, then the API uses unqualified function ARN which results in invocation of the &lt;code&gt;$LATEST&lt;/code&gt; version.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *qualifier</Declaration>
			
			
			<Anchor>//api/name/qualifier</Anchor>
            <NodeRef refid="1259"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSLambdaInvocationRequest/qualifier</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;You can use this optional parameter to specify a Lambda function version or alias name. If you specify a function version, the API uses the qualified function ARN to invoke a specific Lambda function. If you specify an alias name, the API uses the alias ARN to invoke the Lambda function version to which the alias points.&lt;/p&gt;&lt;p&gt;If you don&apos;t provide this parameter, then the API uses unqualified function ARN which results in invocation of the &lt;code&gt;$LATEST&lt;/code&gt; version.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *qualifier</Declaration>
			
			
			<Anchor>//api/name/qualifier</Anchor>
            <NodeRef refid="1259"/>
		</Token>
		
        
        
	</File>
</Tokens>