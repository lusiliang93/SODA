<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/AWSLambdaInvoker.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/AWSLambdaInvoker</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>AWSLambdaInvoker.h</DeclaredIn>
            
			
			<NodeRef refid="1263"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AWSLambdaInvoker/defaultLambdaInvoker</TokenIdentifier>
			<Abstract type="html">Returns a shared instance of this service client using [AWSServiceManager defaultServiceManager].defaultServiceConfiguration. When defaultServiceConfiguration is not set, this method returns nil.</Abstract>
			<DeclaredIn>AWSLambdaInvoker.h</DeclaredIn>
			
			<Declaration>+ (instancetype)defaultLambdaInvoker</Declaration>
			
			<ReturnValue><Abstract type="html">A shared instance of this service client.</Abstract></ReturnValue>
			<Anchor>//api/name/defaultLambdaInvoker</Anchor>
            <NodeRef refid="1263"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AWSLambdaInvoker/registerLambdaInvokerWithConfiguration:forKey:</TokenIdentifier>
			<Abstract type="html">Creates a service client with the given service configuration and registers it for the key.</Abstract>
			<DeclaredIn>AWSLambdaInvoker.h</DeclaredIn>
			
			<Declaration>+ (void)registerLambdaInvokerWithConfiguration:(AWSServiceConfiguration *)configuration forKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>configuration</Name>
					<Abstract type="html">A service configuration object.</Abstract>
				</Parameter><Parameter>
					<Name>key</Name>
					<Abstract type="html">A string to identify the service client.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/registerLambdaInvokerWithConfiguration:forKey:</Anchor>
            <NodeRef refid="1263"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AWSLambdaInvoker/LambdaInvokerForKey:</TokenIdentifier>
			<Abstract type="html">Retrieves the service client associated with the key. You need to call + registerKinesisWithConfiguration:forKey: before invoking this method.</Abstract>
			<DeclaredIn>AWSLambdaInvoker.h</DeclaredIn>
			
			<Declaration>+ (instancetype)LambdaInvokerForKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">A string to identify the service client.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of the service client.</Abstract></ReturnValue>
			<Anchor>//api/name/LambdaInvokerForKey:</Anchor>
            <NodeRef refid="1263"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AWSLambdaInvoker/removeLambdaInvokerForKey:</TokenIdentifier>
			<Abstract type="html">Removes the service client associated with the key and release it.</Abstract>
			<DeclaredIn>AWSLambdaInvoker.h</DeclaredIn>
			
			<Declaration>+ (void)removeLambdaInvokerForKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">A string to identify the service client.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/removeLambdaInvokerForKey:</Anchor>
            <NodeRef refid="1263"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaInvoker/invoke:</TokenIdentifier>
			<Abstract type="html">Invokes an AWS Lambda function with a given request object.</Abstract>
			<DeclaredIn>AWSLambdaInvoker.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSLambdaInvokerInvocationRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSLambdaInvokerInvocationResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (AWSTask&lt;AWSLambdaInvokerInvocationResponse*&gt; *)invoke:(AWSLambdaInvokerInvocationRequest *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">The request object.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of AWSTask. On successful execution, task.result will contain an instance of AWSLambdaInvokerInvocationResponse. On failed service execution, task.error may contain an NSError with AWSLambdaErrorDomain domain and the following error code: AWSLambdaErrorService, AWSLambdaErrorResourceNotFound, AWSLambdaErrorInvalidParameterValue. On failed function execution, task.error may contain an NSError with AWSLambdaInvokerErrorDomain domain and the following error code: AWSLambdaInvokerErrorTypeFunctionError.</Abstract></ReturnValue>
			<Anchor>//api/name/invoke:</Anchor>
            <NodeRef refid="1263"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaInvoker/invoke:completionHandler:</TokenIdentifier>
			<Abstract type="html">Invokes an AWS Lambda function with a given request object.</Abstract>
			<DeclaredIn>AWSLambdaInvoker.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSLambdaInvokerInvocationRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSLambdaInvokerInvocationResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)invoke:(AWSLambdaInvokerInvocationRequest *)request completionHandler:(void ( ^ _Nullable ) ( AWSLambdaInvokerInvocationResponse *_Nullable response , NSError *_Nullable error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">The request object.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">The completion handler to call when the invoke request is complete.
                          response - An AWSLambdaInvokerInvocationResponse object, or nil if the request failed.
                          error - An error object that indicates why the request failed, or nil if the request was successful. On failed service execution, task.error may contain an NSError with AWSLambdaErrorDomain domain and the following error code: AWSLambdaErrorService, AWSLambdaErrorResourceNotFound, AWSLambdaErrorInvalidParameterValue. On failed function execution, task.error may contain an NSError with AWSLambdaInvokerErrorDomain domain and the following error code: AWSLambdaInvokerErrorTypeFunctionError.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/invoke:completionHandler:</Anchor>
            <NodeRef refid="1263"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaInvoker/invokeFunction:JSONObject:</TokenIdentifier>
			<Abstract type="html">Invokes a synchronous AWS Lambda function with given parameters.</Abstract>
			<DeclaredIn>AWSLambdaInvoker.h</DeclaredIn>
			
			<Declaration>- (AWSTask *)invokeFunction:(NSString *)functionName JSONObject:(nullable id)JSONObject</Declaration>
			<Parameters>
				<Parameter>
					<Name>functionName</Name>
					<Abstract type="html">The name of a function.</Abstract>
				</Parameter><Parameter>
					<Name>JSONObject</Name>
					<Abstract type="html">The object from which to generate JSON request data. Can be nil.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of AWSTask. On successful execution, task.result will contain a JSON object. On failed service execution, task.error may contain an NSError with AWSLambdaErrorDomain domain and the following error code: AWSLambdaErrorService, AWSLambdaErrorResourceNotFound, AWSLambdaErrorInvalidParameterValue. On failed function execution, task.error may contain an NSError with AWSLambdaInvokerErrorDomain domain and the following error code: AWSLambdaInvokerErrorTypeFunctionError.</Abstract></ReturnValue>
			<Anchor>//api/name/invokeFunction:JSONObject:</Anchor>
            <NodeRef refid="1263"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaInvoker/invokeFunction:JSONObject:completionHandler:</TokenIdentifier>
			<Abstract type="html">Invokes a synchronous AWS Lambda function with given parameters.</Abstract>
			<DeclaredIn>AWSLambdaInvoker.h</DeclaredIn>
			
			<Declaration>- (void)invokeFunction:(NSString *)functionName JSONObject:(nullable id)JSONObject completionHandler:(void ( ^ _Nullable ) ( id _Nullable response , NSError *_Nullable error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>functionName</Name>
					<Abstract type="html">The name of a function.</Abstract>
				</Parameter><Parameter>
					<Name>JSONObject</Name>
					<Abstract type="html">The object from which to generate JSON request data. Can be nil.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">The completion handler to call when the invoke request is complete.
                          response - A JSON object., or nil if the request failed.
                          error - An error object that indicates why the request failed, or nil if the request was successful. On failed service execution, task.error may contain an NSError with AWSLambdaErrorDomain domain and the following error code: AWSLambdaErrorService, AWSLambdaErrorResourceNotFound, AWSLambdaErrorInvalidParameterValue. On failed function execution, task.error may contain an NSError with AWSLambdaInvokerErrorDomain domain and the following error code: AWSLambdaInvokerErrorTypeFunctionError.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/invokeFunction:JSONObject:completionHandler:</Anchor>
            <NodeRef refid="1263"/>
		</Token>
		
        
        
	</File>
</Tokens>