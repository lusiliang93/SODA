<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/AWSCognitoIdentityProviderAdminCreateUserRequest.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/AWSCognitoIdentityProviderAdminCreateUserRequest</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Represents the request to create a user in the specified user pool.&lt;/p&gt;
Required parameters: [UserPoolId, Username]</Abstract>
			<DeclaredIn>AWSCognitoIdentityProviderModel.h</DeclaredIn>
            
			
			<NodeRef refid="184"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityProviderAdminCreateUserRequest/setDesiredDeliveryMediums:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Specify &quot;EMAIL&quot; if email will be used to send the welcome message. Specify &quot;SMS&quot; if the phone number will be used. The default value is &quot;SMS&quot;. More than one value can be specified.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentityProviderModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSArray&lt;NSString*&gt; *desiredDeliveryMediums</Declaration>
			
			
			<Anchor>//api/name/desiredDeliveryMediums</Anchor>
            <NodeRef refid="184"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityProviderAdminCreateUserRequest/desiredDeliveryMediums</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Specify &quot;EMAIL&quot; if email will be used to send the welcome message. Specify &quot;SMS&quot; if the phone number will be used. The default value is &quot;SMS&quot;. More than one value can be specified.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentityProviderModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSArray&lt;NSString*&gt; *desiredDeliveryMediums</Declaration>
			
			
			<Anchor>//api/name/desiredDeliveryMediums</Anchor>
            <NodeRef refid="184"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSCognitoIdentityProviderAdminCreateUserRequest/desiredDeliveryMediums</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Specify &quot;EMAIL&quot; if email will be used to send the welcome message. Specify &quot;SMS&quot; if the phone number will be used. The default value is &quot;SMS&quot;. More than one value can be specified.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentityProviderModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSArray&lt;NSString*&gt; *desiredDeliveryMediums</Declaration>
			
			
			<Anchor>//api/name/desiredDeliveryMediums</Anchor>
            <NodeRef refid="184"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityProviderAdminCreateUserRequest/setForceAliasCreation:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;This parameter is only used if the phonenumberverified or email_verified attribute is set to True. Otherwise, it is ignored.&lt;/p&gt;&lt;p&gt;If this parameter is set to True and the phone number or email address specified in the UserAttributes parameter already exists as an alias with a different user, the API call will migrate the alias from the previous user to the newly created user. The previous user will no longer be able to log in using that alias.&lt;/p&gt;&lt;p&gt;If this parameter is set to False, the API throws an AliasExistsException error if the alias already exists. The default value is False.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentityProviderModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *forceAliasCreation</Declaration>
			
			
			<Anchor>//api/name/forceAliasCreation</Anchor>
            <NodeRef refid="184"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityProviderAdminCreateUserRequest/forceAliasCreation</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;This parameter is only used if the phonenumberverified or email_verified attribute is set to True. Otherwise, it is ignored.&lt;/p&gt;&lt;p&gt;If this parameter is set to True and the phone number or email address specified in the UserAttributes parameter already exists as an alias with a different user, the API call will migrate the alias from the previous user to the newly created user. The previous user will no longer be able to log in using that alias.&lt;/p&gt;&lt;p&gt;If this parameter is set to False, the API throws an AliasExistsException error if the alias already exists. The default value is False.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentityProviderModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *forceAliasCreation</Declaration>
			
			
			<Anchor>//api/name/forceAliasCreation</Anchor>
            <NodeRef refid="184"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSCognitoIdentityProviderAdminCreateUserRequest/forceAliasCreation</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;This parameter is only used if the phonenumberverified or email_verified attribute is set to True. Otherwise, it is ignored.&lt;/p&gt;&lt;p&gt;If this parameter is set to True and the phone number or email address specified in the UserAttributes parameter already exists as an alias with a different user, the API call will migrate the alias from the previous user to the newly created user. The previous user will no longer be able to log in using that alias.&lt;/p&gt;&lt;p&gt;If this parameter is set to False, the API throws an AliasExistsException error if the alias already exists. The default value is False.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentityProviderModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *forceAliasCreation</Declaration>
			
			
			<Anchor>//api/name/forceAliasCreation</Anchor>
            <NodeRef refid="184"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityProviderAdminCreateUserRequest/setMessageAction:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Set to &quot;RESEND&quot; to resend the invitation message to a user that already exists and reset the expiration limit on the user&apos;s account. Set to &quot;SUPPRESS&quot; to suppress sending the message. Only one value can be specified.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentityProviderModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) AWSCognitoIdentityProviderMessageActionType messageAction</Declaration>
			
			
			<Anchor>//api/name/messageAction</Anchor>
            <NodeRef refid="184"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityProviderAdminCreateUserRequest/messageAction</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Set to &quot;RESEND&quot; to resend the invitation message to a user that already exists and reset the expiration limit on the user&apos;s account. Set to &quot;SUPPRESS&quot; to suppress sending the message. Only one value can be specified.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentityProviderModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) AWSCognitoIdentityProviderMessageActionType messageAction</Declaration>
			
			
			<Anchor>//api/name/messageAction</Anchor>
            <NodeRef refid="184"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSCognitoIdentityProviderAdminCreateUserRequest/messageAction</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Set to &quot;RESEND&quot; to resend the invitation message to a user that already exists and reset the expiration limit on the user&apos;s account. Set to &quot;SUPPRESS&quot; to suppress sending the message. Only one value can be specified.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentityProviderModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) AWSCognitoIdentityProviderMessageActionType messageAction</Declaration>
			
			
			<Anchor>//api/name/messageAction</Anchor>
            <NodeRef refid="184"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityProviderAdminCreateUserRequest/setTemporaryPassword:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The user&apos;s temporary password. This password must conform to the password policy that you specified when you created the user pool.&lt;/p&gt;&lt;p&gt;The temporary password is valid only once. To complete the Admin Create User flow, the user must enter the temporary password in the sign-in page along with a new password to be used in all future sign-ins.&lt;/p&gt;&lt;p&gt;This parameter is not required. If you do not specify a value, Amazon Cognito generates one for you.&lt;/p&gt;&lt;p&gt;The temporary password can only be used until the user account expiration limit that you specified when you created the user pool. To reset the account after that time limit, you must call AdminCreateUser again, specifying &quot;RESEND&quot; for the MessageAction parameter.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentityProviderModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *temporaryPassword</Declaration>
			
			
			<Anchor>//api/name/temporaryPassword</Anchor>
            <NodeRef refid="184"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityProviderAdminCreateUserRequest/temporaryPassword</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The user&apos;s temporary password. This password must conform to the password policy that you specified when you created the user pool.&lt;/p&gt;&lt;p&gt;The temporary password is valid only once. To complete the Admin Create User flow, the user must enter the temporary password in the sign-in page along with a new password to be used in all future sign-ins.&lt;/p&gt;&lt;p&gt;This parameter is not required. If you do not specify a value, Amazon Cognito generates one for you.&lt;/p&gt;&lt;p&gt;The temporary password can only be used until the user account expiration limit that you specified when you created the user pool. To reset the account after that time limit, you must call AdminCreateUser again, specifying &quot;RESEND&quot; for the MessageAction parameter.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentityProviderModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *temporaryPassword</Declaration>
			
			
			<Anchor>//api/name/temporaryPassword</Anchor>
            <NodeRef refid="184"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSCognitoIdentityProviderAdminCreateUserRequest/temporaryPassword</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The user&apos;s temporary password. This password must conform to the password policy that you specified when you created the user pool.&lt;/p&gt;&lt;p&gt;The temporary password is valid only once. To complete the Admin Create User flow, the user must enter the temporary password in the sign-in page along with a new password to be used in all future sign-ins.&lt;/p&gt;&lt;p&gt;This parameter is not required. If you do not specify a value, Amazon Cognito generates one for you.&lt;/p&gt;&lt;p&gt;The temporary password can only be used until the user account expiration limit that you specified when you created the user pool. To reset the account after that time limit, you must call AdminCreateUser again, specifying &quot;RESEND&quot; for the MessageAction parameter.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentityProviderModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *temporaryPassword</Declaration>
			
			
			<Anchor>//api/name/temporaryPassword</Anchor>
            <NodeRef refid="184"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityProviderAdminCreateUserRequest/setUserAttributes:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;An array of name-value pairs that contain user attributes and attribute values to be set for the user to be created. You can create a user without specifying any attributes other than Username. However, any attributes that you specify as required (in CreateUserPool or in the &lt;b&gt;Attributes&lt;/b&gt; tab of the console) must be supplied either by you (in your call to AdminCreateUser) or by the user (when he or she signs up in response to your welcome message).&lt;/p&gt;&lt;p&gt;To send a message inviting the user to sign up, you must specify the user&apos;s email address or phone number. This can be done in your call to AdminCreateUser or in the &lt;b&gt;Users&lt;/b&gt; tab of the Amazon Cognito console for managing your user pools.&lt;/p&gt;&lt;p&gt;In your call to AdminCreateUser, you can set the emailverified attribute to True, and you can set the phonenumberverified attribute to True. (You cannot do this by calling other operations such as AdminUpdateUserAttributes.)&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;email&lt;/b&gt;: The email address of the user to whom the message that contains the code and username will be sent. Required if the emailverified attribute is set to True, or if &quot;EMAIL&quot; is specified in the DesiredDeliveryMediums parameter.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;phonenumber&lt;/b&gt;: The phone number of the user to whom the message that contains the code and username will be sent. Required if the phonenumber_verified attribute is set to True, or if &quot;SMS&quot; is specified in the DesiredDeliveryMediums parameter.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentityProviderModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSArray&lt;AWSCognitoIdentityProviderAttributeType*&gt; *userAttributes</Declaration>
			
			
			<Anchor>//api/name/userAttributes</Anchor>
            <NodeRef refid="184"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityProviderAdminCreateUserRequest/userAttributes</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;An array of name-value pairs that contain user attributes and attribute values to be set for the user to be created. You can create a user without specifying any attributes other than Username. However, any attributes that you specify as required (in CreateUserPool or in the &lt;b&gt;Attributes&lt;/b&gt; tab of the console) must be supplied either by you (in your call to AdminCreateUser) or by the user (when he or she signs up in response to your welcome message).&lt;/p&gt;&lt;p&gt;To send a message inviting the user to sign up, you must specify the user&apos;s email address or phone number. This can be done in your call to AdminCreateUser or in the &lt;b&gt;Users&lt;/b&gt; tab of the Amazon Cognito console for managing your user pools.&lt;/p&gt;&lt;p&gt;In your call to AdminCreateUser, you can set the emailverified attribute to True, and you can set the phonenumberverified attribute to True. (You cannot do this by calling other operations such as AdminUpdateUserAttributes.)&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;email&lt;/b&gt;: The email address of the user to whom the message that contains the code and username will be sent. Required if the emailverified attribute is set to True, or if &quot;EMAIL&quot; is specified in the DesiredDeliveryMediums parameter.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;phonenumber&lt;/b&gt;: The phone number of the user to whom the message that contains the code and username will be sent. Required if the phonenumber_verified attribute is set to True, or if &quot;SMS&quot; is specified in the DesiredDeliveryMediums parameter.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentityProviderModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSArray&lt;AWSCognitoIdentityProviderAttributeType*&gt; *userAttributes</Declaration>
			
			
			<Anchor>//api/name/userAttributes</Anchor>
            <NodeRef refid="184"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSCognitoIdentityProviderAdminCreateUserRequest/userAttributes</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;An array of name-value pairs that contain user attributes and attribute values to be set for the user to be created. You can create a user without specifying any attributes other than Username. However, any attributes that you specify as required (in CreateUserPool or in the &lt;b&gt;Attributes&lt;/b&gt; tab of the console) must be supplied either by you (in your call to AdminCreateUser) or by the user (when he or she signs up in response to your welcome message).&lt;/p&gt;&lt;p&gt;To send a message inviting the user to sign up, you must specify the user&apos;s email address or phone number. This can be done in your call to AdminCreateUser or in the &lt;b&gt;Users&lt;/b&gt; tab of the Amazon Cognito console for managing your user pools.&lt;/p&gt;&lt;p&gt;In your call to AdminCreateUser, you can set the emailverified attribute to True, and you can set the phonenumberverified attribute to True. (You cannot do this by calling other operations such as AdminUpdateUserAttributes.)&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;email&lt;/b&gt;: The email address of the user to whom the message that contains the code and username will be sent. Required if the emailverified attribute is set to True, or if &quot;EMAIL&quot; is specified in the DesiredDeliveryMediums parameter.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;b&gt;phonenumber&lt;/b&gt;: The phone number of the user to whom the message that contains the code and username will be sent. Required if the phonenumber_verified attribute is set to True, or if &quot;SMS&quot; is specified in the DesiredDeliveryMediums parameter.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentityProviderModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSArray&lt;AWSCognitoIdentityProviderAttributeType*&gt; *userAttributes</Declaration>
			
			
			<Anchor>//api/name/userAttributes</Anchor>
            <NodeRef refid="184"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityProviderAdminCreateUserRequest/setUserPoolId:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The user pool ID for the user pool where the user will be created.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentityProviderModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *userPoolId</Declaration>
			
			
			<Anchor>//api/name/userPoolId</Anchor>
            <NodeRef refid="184"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityProviderAdminCreateUserRequest/userPoolId</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The user pool ID for the user pool where the user will be created.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentityProviderModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *userPoolId</Declaration>
			
			
			<Anchor>//api/name/userPoolId</Anchor>
            <NodeRef refid="184"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSCognitoIdentityProviderAdminCreateUserRequest/userPoolId</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The user pool ID for the user pool where the user will be created.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentityProviderModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *userPoolId</Declaration>
			
			
			<Anchor>//api/name/userPoolId</Anchor>
            <NodeRef refid="184"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityProviderAdminCreateUserRequest/setUsername:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The username for the user. Must be unique within the user pool. Must be a UTF-8 string between 1 and 128 characters. After the user is created, the username cannot be changed.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentityProviderModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *username</Declaration>
			
			
			<Anchor>//api/name/username</Anchor>
            <NodeRef refid="184"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityProviderAdminCreateUserRequest/username</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The username for the user. Must be unique within the user pool. Must be a UTF-8 string between 1 and 128 characters. After the user is created, the username cannot be changed.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentityProviderModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *username</Declaration>
			
			
			<Anchor>//api/name/username</Anchor>
            <NodeRef refid="184"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSCognitoIdentityProviderAdminCreateUserRequest/username</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The username for the user. Must be unique within the user pool. Must be a UTF-8 string between 1 and 128 characters. After the user is created, the username cannot be changed.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentityProviderModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *username</Declaration>
			
			
			<Anchor>//api/name/username</Anchor>
            <NodeRef refid="184"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityProviderAdminCreateUserRequest/setValidationData:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The user&apos;s validation data. This is an array of name-value pairs that contain user attributes and attribute values that you can use for custom validation, such as restricting the types of user accounts that can be registered. For example, you might choose to allow or disallow user sign-up based on the user&apos;s domain.&lt;/p&gt;&lt;p&gt;To configure custom validation, you must create a Pre Sign-up Lambda trigger for the user pool as described in the Amazon Cognito Developer Guide. The Lambda trigger receives the validation data and uses it in the validation process.&lt;/p&gt;&lt;p&gt;The user&apos;s validation data is not persisted.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentityProviderModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSArray&lt;AWSCognitoIdentityProviderAttributeType*&gt; *validationData</Declaration>
			
			
			<Anchor>//api/name/validationData</Anchor>
            <NodeRef refid="184"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityProviderAdminCreateUserRequest/validationData</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The user&apos;s validation data. This is an array of name-value pairs that contain user attributes and attribute values that you can use for custom validation, such as restricting the types of user accounts that can be registered. For example, you might choose to allow or disallow user sign-up based on the user&apos;s domain.&lt;/p&gt;&lt;p&gt;To configure custom validation, you must create a Pre Sign-up Lambda trigger for the user pool as described in the Amazon Cognito Developer Guide. The Lambda trigger receives the validation data and uses it in the validation process.&lt;/p&gt;&lt;p&gt;The user&apos;s validation data is not persisted.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentityProviderModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSArray&lt;AWSCognitoIdentityProviderAttributeType*&gt; *validationData</Declaration>
			
			
			<Anchor>//api/name/validationData</Anchor>
            <NodeRef refid="184"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSCognitoIdentityProviderAdminCreateUserRequest/validationData</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The user&apos;s validation data. This is an array of name-value pairs that contain user attributes and attribute values that you can use for custom validation, such as restricting the types of user accounts that can be registered. For example, you might choose to allow or disallow user sign-up based on the user&apos;s domain.&lt;/p&gt;&lt;p&gt;To configure custom validation, you must create a Pre Sign-up Lambda trigger for the user pool as described in the Amazon Cognito Developer Guide. The Lambda trigger receives the validation data and uses it in the validation process.&lt;/p&gt;&lt;p&gt;The user&apos;s validation data is not persisted.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentityProviderModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSArray&lt;AWSCognitoIdentityProviderAttributeType*&gt; *validationData</Declaration>
			
			
			<Anchor>//api/name/validationData</Anchor>
            <NodeRef refid="184"/>
		</Token>
		
        
        
	</File>
</Tokens>