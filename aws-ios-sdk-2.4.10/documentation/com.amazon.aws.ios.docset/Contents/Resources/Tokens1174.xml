<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/AWSIoTManager.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/AWSIoTManager</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>AWSIoTManager.h</DeclaredIn>
            
			
			<NodeRef refid="1174"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSIoTManager/setConfiguration:</TokenIdentifier>
			<Abstract type="html">The service configuration used to instantiate this service client.</Abstract>
			<DeclaredIn>AWSIoTManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) AWSServiceConfiguration *configuration</Declaration>
			
			
			<Anchor>//api/name/configuration</Anchor>
            <NodeRef refid="1174"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSIoTManager/configuration</TokenIdentifier>
			<Abstract type="html">The service configuration used to instantiate this service client.</Abstract>
			<DeclaredIn>AWSIoTManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) AWSServiceConfiguration *configuration</Declaration>
			
			
			<Anchor>//api/name/configuration</Anchor>
            <NodeRef refid="1174"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSIoTManager/configuration</TokenIdentifier>
			<Abstract type="html">The service configuration used to instantiate this service client.</Abstract>
			<DeclaredIn>AWSIoTManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) AWSServiceConfiguration *configuration</Declaration>
			
			
			<Anchor>//api/name/configuration</Anchor>
            <NodeRef refid="1174"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AWSIoTManager/defaultIoTManager</TokenIdentifier>
			<Abstract type="html">Returns the singleton service client. If the singleton object does not exist, the SDK instantiates the default service client with defaultServiceConfiguration from [AWSServiceManager defaultServiceManager]. The reference to this object is maintained by the SDK, and you do not need to retain it manually.</Abstract>
			<DeclaredIn>AWSIoTManager.h</DeclaredIn>
			
			<Declaration>+ (instancetype)defaultIoTManager</Declaration>
			
			<ReturnValue><Abstract type="html">The default service client.</Abstract></ReturnValue>
			<Anchor>//api/name/defaultIoTManager</Anchor>
            <NodeRef refid="1174"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AWSIoTManager/registerIoTManagerWithConfiguration:forKey:</TokenIdentifier>
			<Abstract type="html">Creates a service client with the given service configuration and registers it for the key.</Abstract>
			<DeclaredIn>AWSIoTManager.h</DeclaredIn>
			
			<Declaration>+ (void)registerIoTManagerWithConfiguration:(AWSServiceConfiguration *)configuration forKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>configuration</Name>
					<Abstract type="html">A service configuration object.</Abstract>
				</Parameter><Parameter>
					<Name>key</Name>
					<Abstract type="html">A string to identify the service client.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The service client configured as requested</Abstract></ReturnValue>
			<Anchor>//api/name/registerIoTManagerWithConfiguration:forKey:</Anchor>
            <NodeRef refid="1174"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AWSIoTManager/IoTManagerForKey:</TokenIdentifier>
			<Abstract type="html">Retrieves the service client associated with the key. You need to call + registerIoTManagerWithConfiguration:forKey: before invoking this method.</Abstract>
			<DeclaredIn>AWSIoTManager.h</DeclaredIn>
			
			<Declaration>+ (instancetype)IoTManagerForKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">A string to identify the service client.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of the service client.</Abstract></ReturnValue>
			<Anchor>//api/name/IoTManagerForKey:</Anchor>
            <NodeRef refid="1174"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AWSIoTManager/removeIoTManagerForKey:</TokenIdentifier>
			<Abstract type="html">Removes the service client associated with the key and release it.</Abstract>
			<DeclaredIn>AWSIoTManager.h</DeclaredIn>
			
			<Declaration>+ (void)removeIoTManagerForKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">A string to identify the service client.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/removeIoTManagerForKey:</Anchor>
            <NodeRef refid="1174"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSIoTManager/createKeysAndCertificateFromCsr:callback:</TokenIdentifier>
			<Abstract type="html">Creates keys and certificate from a CSR created using the specified dictionary</Abstract>
			<DeclaredIn>AWSIoTManager.h</DeclaredIn>
			
			<Declaration>- (void)createKeysAndCertificateFromCsr:(NSDictionary *)csrDictionary callback:(void ( ^ ) ( AWSIoTCreateCertificateResponse *mainResponse ))callback</Declaration>
			<Parameters>
				<Parameter>
					<Name>csrDictionary</Name>
					<Abstract type="html">contains values used to generate the CSR.  Requires values for
keys: commonName, countryName, organizationName, organizationalUnitName</Abstract>
				</Parameter><Parameter>
					<Name>callback</Name>
					<Abstract type="html">When new certificate is created the function of block will be called with an instance of AWSIOTDescribeCertificateResponse</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/createKeysAndCertificateFromCsr:callback:</Anchor>
            <NodeRef refid="1174"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AWSIoTManager/importIdentityFromPKCS12Data:passPhrase:certificateId:</TokenIdentifier>
			<Abstract type="html">Import PKCS12 identity into keychain.  This method allows you to import an
identity created using the AWS console or CLI into the keychain.  The identity is
contained in PKCS12 data; you can create PKCS12 files (suffix .p12) using openssl
as follows:</Abstract>
			<DeclaredIn>AWSIoTManager.h</DeclaredIn>
			
			<Declaration>+ (BOOL)importIdentityFromPKCS12Data:(NSData *)pkcs12Data passPhrase:(NSString *)passPhrase certificateId:(NSString *)certificateId</Declaration>
			<Parameters>
				<Parameter>
					<Name>pkcs12Data</Name>
					<Abstract type="html">pkcs12 raw data. Will only import the first item.</Abstract>
				</Parameter><Parameter>
					<Name>passPhrase</Name>
					<Abstract type="html">Pass phrase used to decrypt the pkcs12 data.</Abstract>
				</Parameter><Parameter>
					<Name>certificateId</Name>
					<Abstract type="html">Unique identifier used to find the key/certificate for use.

  </Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/importIdentityFromPKCS12Data:passPhrase:certificateId:</Anchor>
            <NodeRef refid="1174"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AWSIoTManager/isValidCertificate:</TokenIdentifier>
			<Abstract type="html">Validates the certificate with the given identifier of certificate.</Abstract>
			<DeclaredIn>AWSIoTManager.h</DeclaredIn>
			
			<Declaration>+ (BOOL)isValidCertificate:(NSString *)certificateId</Declaration>
			<Parameters>
				<Parameter>
					<Name>certificateId</Name>
					<Abstract type="html">The certificate identifier</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">TRUE if certificate is valid, else FALSE</Abstract></ReturnValue>
			<Anchor>//api/name/isValidCertificate:</Anchor>
            <NodeRef refid="1174"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AWSIoTManager/deleteCertificate</TokenIdentifier>
			<Abstract type="html">Deletes keys and certificate</Abstract>
			<DeclaredIn>AWSIoTManager.h</DeclaredIn>
			
			<Declaration>+ (BOOL)deleteCertificate</Declaration>
			
			<ReturnValue><Abstract type="html">TRUE if certificate is deleted, else FALSE</Abstract></ReturnValue>
			<Anchor>//api/name/deleteCertificate</Anchor>
            <NodeRef refid="1174"/>
		</Token>
		
        
        
	</File>
</Tokens>