<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/AWSLambdaInvocationResponse.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/AWSLambdaInvocationResponse</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Upon success, returns an empty response. Otherwise, throws an exception.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
            
			
			<NodeRef refid="1260"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaInvocationResponse/setFunctionError:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Indicates whether an error occurred while executing the Lambda function. If an error occurred this field will have one of two values; &lt;code&gt;Handled&lt;/code&gt; or &lt;code&gt;Unhandled&lt;/code&gt;. &lt;code&gt;Handled&lt;/code&gt; errors are errors that are reported by the function while the &lt;code&gt;Unhandled&lt;/code&gt; errors are those detected and reported by AWS Lambda. Unhandled errors include out of memory errors and function timeouts. For information about how to report an &lt;code&gt;Handled&lt;/code&gt; error, see Programming Model. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *functionError</Declaration>
			
			
			<Anchor>//api/name/functionError</Anchor>
            <NodeRef refid="1260"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaInvocationResponse/functionError</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Indicates whether an error occurred while executing the Lambda function. If an error occurred this field will have one of two values; &lt;code&gt;Handled&lt;/code&gt; or &lt;code&gt;Unhandled&lt;/code&gt;. &lt;code&gt;Handled&lt;/code&gt; errors are errors that are reported by the function while the &lt;code&gt;Unhandled&lt;/code&gt; errors are those detected and reported by AWS Lambda. Unhandled errors include out of memory errors and function timeouts. For information about how to report an &lt;code&gt;Handled&lt;/code&gt; error, see Programming Model. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *functionError</Declaration>
			
			
			<Anchor>//api/name/functionError</Anchor>
            <NodeRef refid="1260"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSLambdaInvocationResponse/functionError</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Indicates whether an error occurred while executing the Lambda function. If an error occurred this field will have one of two values; &lt;code&gt;Handled&lt;/code&gt; or &lt;code&gt;Unhandled&lt;/code&gt;. &lt;code&gt;Handled&lt;/code&gt; errors are errors that are reported by the function while the &lt;code&gt;Unhandled&lt;/code&gt; errors are those detected and reported by AWS Lambda. Unhandled errors include out of memory errors and function timeouts. For information about how to report an &lt;code&gt;Handled&lt;/code&gt; error, see Programming Model. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *functionError</Declaration>
			
			
			<Anchor>//api/name/functionError</Anchor>
            <NodeRef refid="1260"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaInvocationResponse/setLogResult:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt; It is the base64-encoded logs for the Lambda function invocation. This is present only if the invocation type is &lt;code&gt;RequestResponse&lt;/code&gt; and the logs were requested. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *logResult</Declaration>
			
			
			<Anchor>//api/name/logResult</Anchor>
            <NodeRef refid="1260"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaInvocationResponse/logResult</TokenIdentifier>
			<Abstract type="html">&lt;p&gt; It is the base64-encoded logs for the Lambda function invocation. This is present only if the invocation type is &lt;code&gt;RequestResponse&lt;/code&gt; and the logs were requested. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *logResult</Declaration>
			
			
			<Anchor>//api/name/logResult</Anchor>
            <NodeRef refid="1260"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSLambdaInvocationResponse/logResult</TokenIdentifier>
			<Abstract type="html">&lt;p&gt; It is the base64-encoded logs for the Lambda function invocation. This is present only if the invocation type is &lt;code&gt;RequestResponse&lt;/code&gt; and the logs were requested. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *logResult</Declaration>
			
			
			<Anchor>//api/name/logResult</Anchor>
            <NodeRef refid="1260"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaInvocationResponse/setPayload:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt; It is the JSON representation of the object returned by the Lambda function. In This is present only if the invocation type is &lt;code&gt;RequestResponse&lt;/code&gt;. &lt;/p&gt;&lt;p&gt;In the event of a function error this field contains a message describing the error. For the &lt;code&gt;Handled&lt;/code&gt; errors the Lambda function will report this message. For &lt;code&gt;Unhandled&lt;/code&gt; errors AWS Lambda reports the message. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) id _Nullable payload</Declaration>
			
			
			<Anchor>//api/name/payload</Anchor>
            <NodeRef refid="1260"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaInvocationResponse/payload</TokenIdentifier>
			<Abstract type="html">&lt;p&gt; It is the JSON representation of the object returned by the Lambda function. In This is present only if the invocation type is &lt;code&gt;RequestResponse&lt;/code&gt;. &lt;/p&gt;&lt;p&gt;In the event of a function error this field contains a message describing the error. For the &lt;code&gt;Handled&lt;/code&gt; errors the Lambda function will report this message. For &lt;code&gt;Unhandled&lt;/code&gt; errors AWS Lambda reports the message. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) id _Nullable payload</Declaration>
			
			
			<Anchor>//api/name/payload</Anchor>
            <NodeRef refid="1260"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSLambdaInvocationResponse/payload</TokenIdentifier>
			<Abstract type="html">&lt;p&gt; It is the JSON representation of the object returned by the Lambda function. In This is present only if the invocation type is &lt;code&gt;RequestResponse&lt;/code&gt;. &lt;/p&gt;&lt;p&gt;In the event of a function error this field contains a message describing the error. For the &lt;code&gt;Handled&lt;/code&gt; errors the Lambda function will report this message. For &lt;code&gt;Unhandled&lt;/code&gt; errors AWS Lambda reports the message. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) id _Nullable payload</Declaration>
			
			
			<Anchor>//api/name/payload</Anchor>
            <NodeRef refid="1260"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaInvocationResponse/setStatusCode:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The HTTP status code will be in the 200 range for successful request. For the &lt;code&gt;RequestResonse&lt;/code&gt; invocation type this status code will be 200. For the &lt;code&gt;Event&lt;/code&gt; invocation type this status code will be 202. For the &lt;code&gt;DryRun&lt;/code&gt; invocation type the status code will be 204. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *statusCode</Declaration>
			
			
			<Anchor>//api/name/statusCode</Anchor>
            <NodeRef refid="1260"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaInvocationResponse/statusCode</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The HTTP status code will be in the 200 range for successful request. For the &lt;code&gt;RequestResonse&lt;/code&gt; invocation type this status code will be 200. For the &lt;code&gt;Event&lt;/code&gt; invocation type this status code will be 202. For the &lt;code&gt;DryRun&lt;/code&gt; invocation type the status code will be 204. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *statusCode</Declaration>
			
			
			<Anchor>//api/name/statusCode</Anchor>
            <NodeRef refid="1260"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSLambdaInvocationResponse/statusCode</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The HTTP status code will be in the 200 range for successful request. For the &lt;code&gt;RequestResonse&lt;/code&gt; invocation type this status code will be 200. For the &lt;code&gt;Event&lt;/code&gt; invocation type this status code will be 202. For the &lt;code&gt;DryRun&lt;/code&gt; invocation type the status code will be 204. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *statusCode</Declaration>
			
			
			<Anchor>//api/name/statusCode</Anchor>
            <NodeRef refid="1260"/>
		</Token>
		
        
        
	</File>
</Tokens>