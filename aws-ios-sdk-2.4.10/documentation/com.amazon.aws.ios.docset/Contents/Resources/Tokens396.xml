<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/AWSDynamoDBKeySchemaElement.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/AWSDynamoDBKeySchemaElement</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Represents &lt;i&gt;a single element&lt;/i&gt; of a key schema. A key schema specifies the attributes that make up the primary key of a table, or the key attributes of an index.&lt;/p&gt;&lt;p&gt;A &lt;i&gt;KeySchemaElement&lt;/i&gt; represents exactly one attribute of the primary key. For example, a simple primary key would be represented by one &lt;i&gt;KeySchemaElement&lt;/i&gt; (for the partition key). A composite primary key would require one &lt;i&gt;KeySchemaElement&lt;/i&gt; for the partition key, and another &lt;i&gt;KeySchemaElement&lt;/i&gt; for the sort key.&lt;/p&gt;&lt;p&gt;A &lt;i&gt;KeySchemaElement&lt;/i&gt; must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a Map.&lt;/p&gt;
Required parameters: [AttributeName, KeyType]</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
            
			
			<NodeRef refid="396"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSDynamoDBKeySchemaElement/setAttributeName:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The name of a key attribute.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *attributeName</Declaration>
			
			
			<Anchor>//api/name/attributeName</Anchor>
            <NodeRef refid="396"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSDynamoDBKeySchemaElement/attributeName</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The name of a key attribute.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *attributeName</Declaration>
			
			
			<Anchor>//api/name/attributeName</Anchor>
            <NodeRef refid="396"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSDynamoDBKeySchemaElement/attributeName</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The name of a key attribute.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *attributeName</Declaration>
			
			
			<Anchor>//api/name/attributeName</Anchor>
            <NodeRef refid="396"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSDynamoDBKeySchemaElement/setKeyType:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The role that this key attribute will assume:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;HASH&lt;/code&gt; - partition key&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;RANGE&lt;/code&gt; - sort key&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;note&gt;&lt;p&gt;The partition key of an item is also known as its &lt;i&gt;hash attribute&lt;/i&gt;. The term &quot;hash attribute&quot; derives from DynamoDB&apos; usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.&lt;/p&gt;&lt;p&gt;The sort key of an item is also known as its &lt;i&gt;range attribute&lt;/i&gt;. The term &quot;range attribute&quot; derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.&lt;/p&gt;&lt;/note&gt;</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) AWSDynamoDBKeyType keyType</Declaration>
			
			
			<Anchor>//api/name/keyType</Anchor>
            <NodeRef refid="396"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSDynamoDBKeySchemaElement/keyType</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The role that this key attribute will assume:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;HASH&lt;/code&gt; - partition key&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;RANGE&lt;/code&gt; - sort key&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;note&gt;&lt;p&gt;The partition key of an item is also known as its &lt;i&gt;hash attribute&lt;/i&gt;. The term &quot;hash attribute&quot; derives from DynamoDB&apos; usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.&lt;/p&gt;&lt;p&gt;The sort key of an item is also known as its &lt;i&gt;range attribute&lt;/i&gt;. The term &quot;range attribute&quot; derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.&lt;/p&gt;&lt;/note&gt;</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) AWSDynamoDBKeyType keyType</Declaration>
			
			
			<Anchor>//api/name/keyType</Anchor>
            <NodeRef refid="396"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSDynamoDBKeySchemaElement/keyType</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The role that this key attribute will assume:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;HASH&lt;/code&gt; - partition key&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;RANGE&lt;/code&gt; - sort key&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;note&gt;&lt;p&gt;The partition key of an item is also known as its &lt;i&gt;hash attribute&lt;/i&gt;. The term &quot;hash attribute&quot; derives from DynamoDB&apos; usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.&lt;/p&gt;&lt;p&gt;The sort key of an item is also known as its &lt;i&gt;range attribute&lt;/i&gt;. The term &quot;range attribute&quot; derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.&lt;/p&gt;&lt;/note&gt;</Abstract>
			<DeclaredIn>AWSDynamoDBModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) AWSDynamoDBKeyType keyType</Declaration>
			
			
			<Anchor>//api/name/keyType</Anchor>
            <NodeRef refid="396"/>
		</Token>
		
        
        
	</File>
</Tokens>