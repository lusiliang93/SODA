<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/AWSSTS.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/AWSSTS</TokenIdentifier>
			<Abstract type="html">&lt;fullname&gt;AWS Security Token Service&lt;/fullname&gt;&lt;p&gt;The AWS Security Token Service (STS) is a web service that enables you to request temporary, limited-privilege credentials for AWS Identity and Access Management (IAM) users or for users that you authenticate (federated users). This guide provides descriptions of the STS API. For more detailed information about using this service, go to AWS CloudTrail User Guide.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSSTSService.h</DeclaredIn>
            
			
			<NodeRef refid="1665"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSSTS/setConfiguration:</TokenIdentifier>
			<Abstract type="html">The service configuration used to instantiate this service client.</Abstract>
			<DeclaredIn>AWSSTSService.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) AWSServiceConfiguration *configuration</Declaration>
			
			
			<Anchor>//api/name/configuration</Anchor>
            <NodeRef refid="1665"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSSTS/configuration</TokenIdentifier>
			<Abstract type="html">The service configuration used to instantiate this service client.</Abstract>
			<DeclaredIn>AWSSTSService.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) AWSServiceConfiguration *configuration</Declaration>
			
			
			<Anchor>//api/name/configuration</Anchor>
            <NodeRef refid="1665"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSSTS/configuration</TokenIdentifier>
			<Abstract type="html">The service configuration used to instantiate this service client.</Abstract>
			<DeclaredIn>AWSSTSService.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) AWSServiceConfiguration *configuration</Declaration>
			
			
			<Anchor>//api/name/configuration</Anchor>
            <NodeRef refid="1665"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AWSSTS/defaultSTS</TokenIdentifier>
			<Abstract type="html">Returns the singleton service client. If the singleton object does not exist, the SDK instantiates the default service client with defaultServiceConfiguration from [AWSServiceManager defaultServiceManager]. The reference to this object is maintained by the SDK, and you do not need to retain it manually.</Abstract>
			<DeclaredIn>AWSSTSService.h</DeclaredIn>
			
			<Declaration>+ (instancetype)defaultSTS</Declaration>
			
			<ReturnValue><Abstract type="html">The default service client.</Abstract></ReturnValue>
			<Anchor>//api/name/defaultSTS</Anchor>
            <NodeRef refid="1665"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AWSSTS/registerSTSWithConfiguration:forKey:</TokenIdentifier>
			<Abstract type="html">Creates a service client with the given service configuration and registers it for the key.</Abstract>
			<DeclaredIn>AWSSTSService.h</DeclaredIn>
			
			<Declaration>+ (void)registerSTSWithConfiguration:(AWSServiceConfiguration *)configuration forKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>configuration</Name>
					<Abstract type="html">A service configuration object.</Abstract>
				</Parameter><Parameter>
					<Name>key</Name>
					<Abstract type="html">A string to identify the service client.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/registerSTSWithConfiguration:forKey:</Anchor>
            <NodeRef refid="1665"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AWSSTS/STSForKey:</TokenIdentifier>
			<Abstract type="html">Retrieves the service client associated with the key. You need to call + registerSTSWithConfiguration:forKey: before invoking this method.</Abstract>
			<DeclaredIn>AWSSTSService.h</DeclaredIn>
			
			<Declaration>+ (instancetype)STSForKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">A string to identify the service client.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of the service client.</Abstract></ReturnValue>
			<Anchor>//api/name/STSForKey:</Anchor>
            <NodeRef refid="1665"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AWSSTS/removeSTSForKey:</TokenIdentifier>
			<Abstract type="html">Removes the service client associated with the key and release it.</Abstract>
			<DeclaredIn>AWSSTSService.h</DeclaredIn>
			
			<Declaration>+ (void)removeSTSForKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">A string to identify the service client.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/removeSTSForKey:</Anchor>
            <NodeRef refid="1665"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSSTS/assumeRole:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Returns a set of temporary security credentials (consisting of an access key ID, a secret access key, and a security token) that you can use to access AWS resources that you might not normally have access to. Typically, you use &lt;code&gt;AssumeRole&lt;/code&gt; for cross-account access or federation. For a comparison of &lt;code&gt;AssumeRole&lt;/code&gt; with the other APIs that produce temporary credentials, see Common Scenarios for Temporary Credentials in the &lt;i&gt;IAM User Guide&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;The temporary security credentials are valid for the duration that you specified when calling &lt;code&gt;AssumeRole&lt;/code&gt;, which can be from 900 seconds (15 minutes) to a maximum of 3600 seconds (1 hour). The default is 1 hour. &lt;/p&gt;&lt;p&gt;The temporary security credentials created by &lt;code&gt;AssumeRole&lt;/code&gt; can be used to make API calls to any AWS service with the following exception: you cannot call the STS service&apos;s &lt;code&gt;GetFederationToken&lt;/code&gt; or &lt;code&gt;GetSessionToken&lt;/code&gt; APIs.&lt;/p&gt;&lt;p&gt;Optionally, you can pass an IAM access policy to this operation. If you choose not to pass a policy, the temporary security credentials that are returned by the operation have the permissions that are defined in the access policy of the role that is being assumed. If you pass a policy to this operation, the temporary security credentials that are returned by the operation have the permissions that are allowed by both the access policy of the role that is being assumed, &lt;i&gt;&lt;b&gt;and&lt;/b&gt;&lt;/i&gt; the policy that you pass. This gives you a way to further restrict the permissions for the resulting temporary security credentials. You cannot use the passed policy to grant permissions that are in excess of those allowed by the access policy of the role that is being assumed. For more information, see Configuring MFA-Protected API Access in the &lt;i&gt;IAM User Guide&lt;/i&gt; guide.&lt;/p&gt;&lt;p&gt;To use MFA with &lt;code&gt;AssumeRole&lt;/code&gt;, you pass values for the &lt;code&gt;SerialNumber&lt;/code&gt; and &lt;code&gt;TokenCode&lt;/code&gt; parameters. The &lt;code&gt;SerialNumber&lt;/code&gt; value identifies the user&apos;s hardware or virtual MFA device. The &lt;code&gt;TokenCode&lt;/code&gt; is the time-based one-time password (TOTP) that the MFA devices produces. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSSTSService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSSTSAssumeRoleRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSSTSAssumeRoleResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (AWSTask&lt;AWSSTSAssumeRoleResponse*&gt; *)assumeRole:(AWSSTSAssumeRoleRequest *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the AssumeRole service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of AWSTask. On successful execution, task.result will contain an instance of AWSSTSAssumeRoleResponse. On failed execution, task.error may contain an NSError with AWSSTSErrorDomain domain and the following error code: AWSSTSErrorMalformedPolicyDocument, AWSSTSErrorPackedPolicyTooLarge, AWSSTSErrorRegionDisabled.</Abstract></ReturnValue>
			<Anchor>//api/name/assumeRole:</Anchor>
            <NodeRef refid="1665"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSSTS/assumeRole:completionHandler:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Returns a set of temporary security credentials (consisting of an access key ID, a secret access key, and a security token) that you can use to access AWS resources that you might not normally have access to. Typically, you use &lt;code&gt;AssumeRole&lt;/code&gt; for cross-account access or federation. For a comparison of &lt;code&gt;AssumeRole&lt;/code&gt; with the other APIs that produce temporary credentials, see Common Scenarios for Temporary Credentials in the &lt;i&gt;IAM User Guide&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;The temporary security credentials are valid for the duration that you specified when calling &lt;code&gt;AssumeRole&lt;/code&gt;, which can be from 900 seconds (15 minutes) to a maximum of 3600 seconds (1 hour). The default is 1 hour. &lt;/p&gt;&lt;p&gt;The temporary security credentials created by &lt;code&gt;AssumeRole&lt;/code&gt; can be used to make API calls to any AWS service with the following exception: you cannot call the STS service&apos;s &lt;code&gt;GetFederationToken&lt;/code&gt; or &lt;code&gt;GetSessionToken&lt;/code&gt; APIs.&lt;/p&gt;&lt;p&gt;Optionally, you can pass an IAM access policy to this operation. If you choose not to pass a policy, the temporary security credentials that are returned by the operation have the permissions that are defined in the access policy of the role that is being assumed. If you pass a policy to this operation, the temporary security credentials that are returned by the operation have the permissions that are allowed by both the access policy of the role that is being assumed, &lt;i&gt;&lt;b&gt;and&lt;/b&gt;&lt;/i&gt; the policy that you pass. This gives you a way to further restrict the permissions for the resulting temporary security credentials. You cannot use the passed policy to grant permissions that are in excess of those allowed by the access policy of the role that is being assumed. For more information, see Configuring MFA-Protected API Access in the &lt;i&gt;IAM User Guide&lt;/i&gt; guide.&lt;/p&gt;&lt;p&gt;To use MFA with &lt;code&gt;AssumeRole&lt;/code&gt;, you pass values for the &lt;code&gt;SerialNumber&lt;/code&gt; and &lt;code&gt;TokenCode&lt;/code&gt; parameters. The &lt;code&gt;SerialNumber&lt;/code&gt; value identifies the user&apos;s hardware or virtual MFA device. The &lt;code&gt;TokenCode&lt;/code&gt; is the time-based one-time password (TOTP) that the MFA devices produces. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSSTSService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSSTSAssumeRoleRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSSTSAssumeRoleResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)assumeRole:(AWSSTSAssumeRoleRequest *)request completionHandler:(void ( ^ _Nullable ) ( AWSSTSAssumeRoleResponse *_Nullable response , NSError *_Nullable error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the AssumeRole service method.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">The completion handler to call when the load request is complete.
                          response - A response object, or nil if the request failed.
                          error - An error object that indicates why the request failed, or nil if the request was successful. On failed execution, error may contain an NSError with AWSSTSErrorDomain domain and the following error code: AWSSTSErrorMalformedPolicyDocument, AWSSTSErrorPackedPolicyTooLarge, AWSSTSErrorRegionDisabled.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/assumeRole:completionHandler:</Anchor>
            <NodeRef refid="1665"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSSTS/assumeRoleWithSAML:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Returns a set of temporary security credentials for users who have been authenticated via a SAML authentication response. This operation provides a mechanism for tying an enterprise identity store or directory to role-based AWS access without user-specific credentials or configuration. For a comparison of &lt;code&gt;AssumeRoleWithSAML&lt;/code&gt; with the other APIs that produce temporary credentials, see Comparing the AWS STS APIs in the &lt;i&gt;IAM User Guide&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;The temporary security credentials returned by this operation consist of an access key ID, a secret access key, and a security token. Applications can use these temporary security credentials to sign calls to AWS services.&lt;/p&gt;&lt;p&gt;The temporary security credentials are valid for the duration that you specified when calling &lt;code&gt;AssumeRole&lt;/code&gt;, or until the time specified in the SAML authentication response&apos;s &lt;code&gt;SessionNotOnOrAfter&lt;/code&gt; value, whichever is shorter. The duration can be from 900 seconds (15 minutes) to a maximum of 3600 seconds (1 hour). The default is 1 hour.&lt;/p&gt;&lt;p&gt;The temporary security credentials created by &lt;code&gt;AssumeRoleWithSAML&lt;/code&gt; can be used to make API calls to any AWS service with the following exception: you cannot call the STS service&apos;s &lt;code&gt;GetFederationToken&lt;/code&gt; or &lt;code&gt;GetSessionToken&lt;/code&gt; APIs.&lt;/p&gt;&lt;p&gt;Optionally, you can pass an IAM access policy to this operation. If you choose not to pass a policy, the temporary security credentials that are returned by the operation have the permissions that are defined in the access policy of the role that is being assumed. If you pass a policy to this operation, the temporary security credentials that are returned by the operation have the permissions that are allowed by the intersection of both the access policy of the role that is being assumed, &lt;i&gt;&lt;b&gt;and&lt;/b&gt;&lt;/i&gt; the policy that you pass. This means that both policies must grant the permission for the action to be allowed. This gives you a way to further restrict the permissions for the resulting temporary security credentials. You cannot use the passed policy to grant permissions that are in excess of those allowed by the access policy of the role that is being assumed. For more information, see Creating a Role for SAML 2.0 Federation in the &lt;i&gt;IAM User Guide&lt;/i&gt;. &lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</Abstract>
			<DeclaredIn>AWSSTSService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSSTSAssumeRoleWithSAMLRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSSTSAssumeRoleWithSAMLResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (AWSTask&lt;AWSSTSAssumeRoleWithSAMLResponse*&gt; *)assumeRoleWithSAML:(AWSSTSAssumeRoleWithSAMLRequest *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the AssumeRoleWithSAML service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of AWSTask. On successful execution, task.result will contain an instance of AWSSTSAssumeRoleWithSAMLResponse. On failed execution, task.error may contain an NSError with AWSSTSErrorDomain domain and the following error code: AWSSTSErrorMalformedPolicyDocument, AWSSTSErrorPackedPolicyTooLarge, AWSSTSErrorIDPRejectedClaim, AWSSTSErrorInvalidIdentityToken, AWSSTSErrorExpiredToken, AWSSTSErrorRegionDisabled.</Abstract></ReturnValue>
			<Anchor>//api/name/assumeRoleWithSAML:</Anchor>
            <NodeRef refid="1665"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSSTS/assumeRoleWithSAML:completionHandler:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Returns a set of temporary security credentials for users who have been authenticated via a SAML authentication response. This operation provides a mechanism for tying an enterprise identity store or directory to role-based AWS access without user-specific credentials or configuration. For a comparison of &lt;code&gt;AssumeRoleWithSAML&lt;/code&gt; with the other APIs that produce temporary credentials, see Comparing the AWS STS APIs in the &lt;i&gt;IAM User Guide&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;The temporary security credentials returned by this operation consist of an access key ID, a secret access key, and a security token. Applications can use these temporary security credentials to sign calls to AWS services.&lt;/p&gt;&lt;p&gt;The temporary security credentials are valid for the duration that you specified when calling &lt;code&gt;AssumeRole&lt;/code&gt;, or until the time specified in the SAML authentication response&apos;s &lt;code&gt;SessionNotOnOrAfter&lt;/code&gt; value, whichever is shorter. The duration can be from 900 seconds (15 minutes) to a maximum of 3600 seconds (1 hour). The default is 1 hour.&lt;/p&gt;&lt;p&gt;The temporary security credentials created by &lt;code&gt;AssumeRoleWithSAML&lt;/code&gt; can be used to make API calls to any AWS service with the following exception: you cannot call the STS service&apos;s &lt;code&gt;GetFederationToken&lt;/code&gt; or &lt;code&gt;GetSessionToken&lt;/code&gt; APIs.&lt;/p&gt;&lt;p&gt;Optionally, you can pass an IAM access policy to this operation. If you choose not to pass a policy, the temporary security credentials that are returned by the operation have the permissions that are defined in the access policy of the role that is being assumed. If you pass a policy to this operation, the temporary security credentials that are returned by the operation have the permissions that are allowed by the intersection of both the access policy of the role that is being assumed, &lt;i&gt;&lt;b&gt;and&lt;/b&gt;&lt;/i&gt; the policy that you pass. This means that both policies must grant the permission for the action to be allowed. This gives you a way to further restrict the permissions for the resulting temporary security credentials. You cannot use the passed policy to grant permissions that are in excess of those allowed by the access policy of the role that is being assumed. For more information, see Creating a Role for SAML 2.0 Federation in the &lt;i&gt;IAM User Guide&lt;/i&gt;. &lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</Abstract>
			<DeclaredIn>AWSSTSService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSSTSAssumeRoleWithSAMLRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSSTSAssumeRoleWithSAMLResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)assumeRoleWithSAML:(AWSSTSAssumeRoleWithSAMLRequest *)request completionHandler:(void ( ^ _Nullable ) ( AWSSTSAssumeRoleWithSAMLResponse *_Nullable response , NSError *_Nullable error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the AssumeRoleWithSAML service method.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">The completion handler to call when the load request is complete.
                          response - A response object, or nil if the request failed.
                          error - An error object that indicates why the request failed, or nil if the request was successful. On failed execution, error may contain an NSError with AWSSTSErrorDomain domain and the following error code: AWSSTSErrorMalformedPolicyDocument, AWSSTSErrorPackedPolicyTooLarge, AWSSTSErrorIDPRejectedClaim, AWSSTSErrorInvalidIdentityToken, AWSSTSErrorExpiredToken, AWSSTSErrorRegionDisabled.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/assumeRoleWithSAML:completionHandler:</Anchor>
            <NodeRef refid="1665"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSSTS/assumeRoleWithWebIdentity:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Returns a set of temporary security credentials for users who have been authenticated in a mobile or web application with a web identity provider, such as Amazon Cognito, Login with Amazon, Facebook, Google, or any OpenID Connect-compatible identity provider.&lt;/p&gt;&lt;note&gt;&lt;p&gt;For mobile applications, we recommend that you use Amazon Cognito. You can use Amazon Cognito with the Comparing the AWS STS APIs in the &lt;i&gt;IAM User Guide&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;The temporary security credentials returned by this API consist of an access key ID, a secret access key, and a security token. Applications can use these temporary security credentials to sign calls to AWS service APIs.&lt;/p&gt;&lt;p&gt;The credentials are valid for the duration that you specified when calling &lt;code&gt;AssumeRoleWithWebIdentity&lt;/code&gt;, which can be from 900 seconds (15 minutes) to a maximum of 3600 seconds (1 hour). The default is 1 hour. &lt;/p&gt;&lt;p&gt;The temporary security credentials created by &lt;code&gt;AssumeRoleWithWebIdentity&lt;/code&gt; can be used to make API calls to any AWS service with the following exception: you cannot call the STS service&apos;s &lt;code&gt;GetFederationToken&lt;/code&gt; or &lt;code&gt;GetSessionToken&lt;/code&gt; APIs.&lt;/p&gt;&lt;p&gt;Optionally, you can pass an IAM access policy to this operation. If you choose not to pass a policy, the temporary security credentials that are returned by the operation have the permissions that are defined in the access policy of the role that is being assumed. If you pass a policy to this operation, the temporary security credentials that are returned by the operation have the permissions that are allowed by both the access policy of the role that is being assumed, &lt;i&gt;&lt;b&gt;and&lt;/b&gt;&lt;/i&gt; the policy that you pass. This gives you a way to further restrict the permissions for the resulting temporary security credentials. You cannot use the passed policy to grant permissions that are in excess of those allowed by the access policy of the role that is being assumed. For more information, see Permissions for AssumeRole, AssumeRoleWithSAML, and AssumeRoleWithWebIdentity in the &lt;i&gt;IAM User Guide&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;Before your application can call &lt;code&gt;AssumeRoleWithWebIdentity&lt;/code&gt;, you must have an identity token from a supported identity provider and create a role that the application can assume. The role that your application assumes must trust the identity provider that is associated with the identity token. In other words, the identity provider must be specified in the role&apos;s trust policy. &lt;/p&gt;&lt;important&gt;&lt;p&gt;Calling &lt;code&gt;AssumeRoleWithWebIdentity&lt;/code&gt; can result in an entry in your AWS CloudTrail logs. The entry includes the &lt;a href=&quot;http://openid.net/specs/openid-connect-core-10.html#Claims&quot;&gt;Subject&lt;/a&gt; of the provided Web Identity Token. We recommend that you avoid using any personally identifiable information (PII) in this field. For example, you could instead use a GUID or a pairwise identifier, as &lt;a href=&quot;http://openid.net/specs/openid-connect-core-10.html#SubjectIDTypes&quot;&gt;suggested in the OIDC specification&lt;/a&gt;.&lt;/p&gt;&lt;/important&gt;&lt;p&gt;For more information about how to use web identity federation and the &lt;code&gt;AssumeRoleWithWebIdentity&lt;/code&gt; API, see the following resources: &lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;AWS SDK for Android. These toolkits contain sample apps that show how to invoke the identity providers, and then how to use the information from these providers to get and use temporary security credentials. &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://aws.amazon.com/articles/4617974389850313&quot;&gt;Web Identity Federation with Mobile Applications&lt;/a&gt;. This article discusses web identity federation and shows an example of how to use web identity federation to get access to content in Amazon S3. &lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</Abstract>
			<DeclaredIn>AWSSTSService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSSTSAssumeRoleWithWebIdentityRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSSTSAssumeRoleWithWebIdentityResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (AWSTask&lt;AWSSTSAssumeRoleWithWebIdentityResponse*&gt; *)assumeRoleWithWebIdentity:(AWSSTSAssumeRoleWithWebIdentityRequest *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the AssumeRoleWithWebIdentity service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of AWSTask. On successful execution, task.result will contain an instance of AWSSTSAssumeRoleWithWebIdentityResponse. On failed execution, task.error may contain an NSError with AWSSTSErrorDomain domain and the following error code: AWSSTSErrorMalformedPolicyDocument, AWSSTSErrorPackedPolicyTooLarge, AWSSTSErrorIDPRejectedClaim, AWSSTSErrorIDPCommunicationError, AWSSTSErrorInvalidIdentityToken, AWSSTSErrorExpiredToken, AWSSTSErrorRegionDisabled.</Abstract></ReturnValue>
			<Anchor>//api/name/assumeRoleWithWebIdentity:</Anchor>
            <NodeRef refid="1665"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSSTS/assumeRoleWithWebIdentity:completionHandler:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Returns a set of temporary security credentials for users who have been authenticated in a mobile or web application with a web identity provider, such as Amazon Cognito, Login with Amazon, Facebook, Google, or any OpenID Connect-compatible identity provider.&lt;/p&gt;&lt;note&gt;&lt;p&gt;For mobile applications, we recommend that you use Amazon Cognito. You can use Amazon Cognito with the Comparing the AWS STS APIs in the &lt;i&gt;IAM User Guide&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;The temporary security credentials returned by this API consist of an access key ID, a secret access key, and a security token. Applications can use these temporary security credentials to sign calls to AWS service APIs.&lt;/p&gt;&lt;p&gt;The credentials are valid for the duration that you specified when calling &lt;code&gt;AssumeRoleWithWebIdentity&lt;/code&gt;, which can be from 900 seconds (15 minutes) to a maximum of 3600 seconds (1 hour). The default is 1 hour. &lt;/p&gt;&lt;p&gt;The temporary security credentials created by &lt;code&gt;AssumeRoleWithWebIdentity&lt;/code&gt; can be used to make API calls to any AWS service with the following exception: you cannot call the STS service&apos;s &lt;code&gt;GetFederationToken&lt;/code&gt; or &lt;code&gt;GetSessionToken&lt;/code&gt; APIs.&lt;/p&gt;&lt;p&gt;Optionally, you can pass an IAM access policy to this operation. If you choose not to pass a policy, the temporary security credentials that are returned by the operation have the permissions that are defined in the access policy of the role that is being assumed. If you pass a policy to this operation, the temporary security credentials that are returned by the operation have the permissions that are allowed by both the access policy of the role that is being assumed, &lt;i&gt;&lt;b&gt;and&lt;/b&gt;&lt;/i&gt; the policy that you pass. This gives you a way to further restrict the permissions for the resulting temporary security credentials. You cannot use the passed policy to grant permissions that are in excess of those allowed by the access policy of the role that is being assumed. For more information, see Permissions for AssumeRole, AssumeRoleWithSAML, and AssumeRoleWithWebIdentity in the &lt;i&gt;IAM User Guide&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;Before your application can call &lt;code&gt;AssumeRoleWithWebIdentity&lt;/code&gt;, you must have an identity token from a supported identity provider and create a role that the application can assume. The role that your application assumes must trust the identity provider that is associated with the identity token. In other words, the identity provider must be specified in the role&apos;s trust policy. &lt;/p&gt;&lt;important&gt;&lt;p&gt;Calling &lt;code&gt;AssumeRoleWithWebIdentity&lt;/code&gt; can result in an entry in your AWS CloudTrail logs. The entry includes the &lt;a href=&quot;http://openid.net/specs/openid-connect-core-10.html#Claims&quot;&gt;Subject&lt;/a&gt; of the provided Web Identity Token. We recommend that you avoid using any personally identifiable information (PII) in this field. For example, you could instead use a GUID or a pairwise identifier, as &lt;a href=&quot;http://openid.net/specs/openid-connect-core-10.html#SubjectIDTypes&quot;&gt;suggested in the OIDC specification&lt;/a&gt;.&lt;/p&gt;&lt;/important&gt;&lt;p&gt;For more information about how to use web identity federation and the &lt;code&gt;AssumeRoleWithWebIdentity&lt;/code&gt; API, see the following resources: &lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;AWS SDK for Android. These toolkits contain sample apps that show how to invoke the identity providers, and then how to use the information from these providers to get and use temporary security credentials. &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://aws.amazon.com/articles/4617974389850313&quot;&gt;Web Identity Federation with Mobile Applications&lt;/a&gt;. This article discusses web identity federation and shows an example of how to use web identity federation to get access to content in Amazon S3. &lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</Abstract>
			<DeclaredIn>AWSSTSService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSSTSAssumeRoleWithWebIdentityRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSSTSAssumeRoleWithWebIdentityResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)assumeRoleWithWebIdentity:(AWSSTSAssumeRoleWithWebIdentityRequest *)request completionHandler:(void ( ^ _Nullable ) ( AWSSTSAssumeRoleWithWebIdentityResponse *_Nullable response , NSError *_Nullable error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the AssumeRoleWithWebIdentity service method.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">The completion handler to call when the load request is complete.
                          response - A response object, or nil if the request failed.
                          error - An error object that indicates why the request failed, or nil if the request was successful. On failed execution, error may contain an NSError with AWSSTSErrorDomain domain and the following error code: AWSSTSErrorMalformedPolicyDocument, AWSSTSErrorPackedPolicyTooLarge, AWSSTSErrorIDPRejectedClaim, AWSSTSErrorIDPCommunicationError, AWSSTSErrorInvalidIdentityToken, AWSSTSErrorExpiredToken, AWSSTSErrorRegionDisabled.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/assumeRoleWithWebIdentity:completionHandler:</Anchor>
            <NodeRef refid="1665"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSSTS/decodeAuthorizationMessage:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Decodes additional information about the authorization status of a request from an encoded message returned in response to an AWS request.&lt;/p&gt;&lt;p&gt;For example, if a user is not authorized to perform an action that he or she has requested, the request returns a &lt;code&gt;Client.UnauthorizedOperation&lt;/code&gt; response (an HTTP 403 response). Some AWS actions additionally return an encoded message that can provide details about this authorization failure. &lt;/p&gt;&lt;note&gt;&lt;p&gt;Only certain AWS actions return an encoded authorization message. The documentation for an individual action indicates whether that action returns an encoded message in addition to returning an HTTP code.&lt;/p&gt;&lt;/note&gt;&lt;p&gt;The message is encoded because the details of the authorization status can constitute privileged information that the user who requested the action should not see. To decode an authorization status message, a user must be granted permissions via an IAM policy to request the &lt;code&gt;DecodeAuthorizationMessage&lt;/code&gt; (&lt;code&gt;sts:DecodeAuthorizationMessage&lt;/code&gt;) action. &lt;/p&gt;&lt;p&gt;The decoded message includes the following type of information:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Whether the request was denied due to an explicit deny or due to the absence of an explicit allow. For more information, see Determining Whether a Request is Allowed or Denied in the &lt;i&gt;IAM User Guide&lt;/i&gt;. &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The principal who made the request.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The requested action.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The requested resource.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The values of condition keys in the context of the user&apos;s request.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</Abstract>
			<DeclaredIn>AWSSTSService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSSTSDecodeAuthorizationMessageRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSSTSDecodeAuthorizationMessageResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (AWSTask&lt;AWSSTSDecodeAuthorizationMessageResponse*&gt; *)decodeAuthorizationMessage:(AWSSTSDecodeAuthorizationMessageRequest *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the DecodeAuthorizationMessage service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of AWSTask. On successful execution, task.result will contain an instance of AWSSTSDecodeAuthorizationMessageResponse. On failed execution, task.error may contain an NSError with AWSSTSErrorDomain domain and the following error code: AWSSTSErrorInvalidAuthorizationMessage.</Abstract></ReturnValue>
			<Anchor>//api/name/decodeAuthorizationMessage:</Anchor>
            <NodeRef refid="1665"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSSTS/decodeAuthorizationMessage:completionHandler:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Decodes additional information about the authorization status of a request from an encoded message returned in response to an AWS request.&lt;/p&gt;&lt;p&gt;For example, if a user is not authorized to perform an action that he or she has requested, the request returns a &lt;code&gt;Client.UnauthorizedOperation&lt;/code&gt; response (an HTTP 403 response). Some AWS actions additionally return an encoded message that can provide details about this authorization failure. &lt;/p&gt;&lt;note&gt;&lt;p&gt;Only certain AWS actions return an encoded authorization message. The documentation for an individual action indicates whether that action returns an encoded message in addition to returning an HTTP code.&lt;/p&gt;&lt;/note&gt;&lt;p&gt;The message is encoded because the details of the authorization status can constitute privileged information that the user who requested the action should not see. To decode an authorization status message, a user must be granted permissions via an IAM policy to request the &lt;code&gt;DecodeAuthorizationMessage&lt;/code&gt; (&lt;code&gt;sts:DecodeAuthorizationMessage&lt;/code&gt;) action. &lt;/p&gt;&lt;p&gt;The decoded message includes the following type of information:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Whether the request was denied due to an explicit deny or due to the absence of an explicit allow. For more information, see Determining Whether a Request is Allowed or Denied in the &lt;i&gt;IAM User Guide&lt;/i&gt;. &lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The principal who made the request.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The requested action.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The requested resource.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The values of condition keys in the context of the user&apos;s request.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</Abstract>
			<DeclaredIn>AWSSTSService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSSTSDecodeAuthorizationMessageRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSSTSDecodeAuthorizationMessageResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)decodeAuthorizationMessage:(AWSSTSDecodeAuthorizationMessageRequest *)request completionHandler:(void ( ^ _Nullable ) ( AWSSTSDecodeAuthorizationMessageResponse *_Nullable response , NSError *_Nullable error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the DecodeAuthorizationMessage service method.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">The completion handler to call when the load request is complete.
                          response - A response object, or nil if the request failed.
                          error - An error object that indicates why the request failed, or nil if the request was successful. On failed execution, error may contain an NSError with AWSSTSErrorDomain domain and the following error code: AWSSTSErrorInvalidAuthorizationMessage.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/decodeAuthorizationMessage:completionHandler:</Anchor>
            <NodeRef refid="1665"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSSTS/getCallerIdentity:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Returns details about the IAM identity whose credentials are used to call the API.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSSTSService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSSTSGetCallerIdentityRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSSTSGetCallerIdentityResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (AWSTask&lt;AWSSTSGetCallerIdentityResponse*&gt; *)getCallerIdentity:(AWSSTSGetCallerIdentityRequest *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the GetCallerIdentity service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of AWSTask. On successful execution, task.result will contain an instance of AWSSTSGetCallerIdentityResponse.</Abstract></ReturnValue>
			<Anchor>//api/name/getCallerIdentity:</Anchor>
            <NodeRef refid="1665"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSSTS/getCallerIdentity:completionHandler:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Returns details about the IAM identity whose credentials are used to call the API.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSSTSService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSSTSGetCallerIdentityRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSSTSGetCallerIdentityResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)getCallerIdentity:(AWSSTSGetCallerIdentityRequest *)request completionHandler:(void ( ^ _Nullable ) ( AWSSTSGetCallerIdentityResponse *_Nullable response , NSError *_Nullable error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the GetCallerIdentity service method.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">The completion handler to call when the load request is complete.
                          response - A response object, or nil if the request failed.
                          error - An error object that indicates why the request failed, or nil if the request was successful.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/getCallerIdentity:completionHandler:</Anchor>
            <NodeRef refid="1665"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSSTS/getFederationToken:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Returns a set of temporary security credentials (consisting of an access key ID, a secret access key, and a security token) for a federated user. A typical use is in a proxy application that gets temporary security credentials on behalf of distributed applications inside a corporate network. Because you must call the &lt;code&gt;GetFederationToken&lt;/code&gt; action using the long-term security credentials of an IAM user, this call is appropriate in contexts where those credentials can be safely stored, usually in a server-based application. For a comparison of &lt;code&gt;GetFederationToken&lt;/code&gt; with the other APIs that produce temporary credentials, see IAM Best Practices in the &lt;i&gt;IAM User Guide&lt;/i&gt;. &lt;/p&gt;&lt;p&gt;The temporary security credentials that are obtained by using the long-term credentials of an IAM user are valid for the specified duration, from 900 seconds (15 minutes) up to a maximium of 129600 seconds (36 hours). The default is 43200 seconds (12 hours). Temporary credentials that are obtained by using AWS root account credentials have a maximum duration of 3600 seconds (1 hour).&lt;/p&gt;&lt;p&gt;The temporary security credentials created by &lt;code&gt;GetFederationToken&lt;/code&gt; can be used to make API calls to any AWS service with the following exceptions:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;You cannot use these credentials to call any IAM APIs.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;You cannot call any STS APIs.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;b&gt;Permissions&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The permissions for the temporary security credentials returned by &lt;code&gt;GetFederationToken&lt;/code&gt; are determined by a combination of the following: &lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;The policy or policies that are attached to the IAM user whose credentials are used to call &lt;code&gt;GetFederationToken&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The policy that is passed as a parameter in the call.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The passed policy is attached to the temporary security credentials that result from the &lt;code&gt;GetFederationToken&lt;/code&gt; API call--that is, to the &lt;i&gt;federated user&lt;/i&gt;. When the federated user makes an AWS request, AWS evaluates the policy attached to the federated user in combination with the policy or policies attached to the IAM user whose credentials were used to call &lt;code&gt;GetFederationToken&lt;/code&gt;. AWS allows the federated user&apos;s request only when both the federated user &lt;i&gt;&lt;b&gt;and&lt;/b&gt;&lt;/i&gt; the IAM user are explicitly allowed to perform the requested action. The passed policy cannot grant more permissions than those that are defined in the IAM user policy.&lt;/p&gt;&lt;p&gt;A typical use case is that the permissions of the IAM user whose credentials are used to call &lt;code&gt;GetFederationToken&lt;/code&gt; are designed to allow access to all the actions and resources that any federated user will need. Then, for individual users, you pass a policy to the operation that scopes down the permissions to a level that&apos;s appropriate to that individual user, using a policy that allows only a subset of permissions that are granted to the IAM user. &lt;/p&gt;&lt;p&gt;If you do not pass a policy, the resulting temporary security credentials have no effective permissions. The only exception is when the temporary security credentials are used to access a resource that has a resource-based policy that specifically allows the federated user to access the resource.&lt;/p&gt;&lt;p&gt;For more information about how permissions work, see GetFederationToken—Federation Through a Custom Identity Broker. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSSTSService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSSTSGetFederationTokenRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSSTSGetFederationTokenResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (AWSTask&lt;AWSSTSGetFederationTokenResponse*&gt; *)getFederationToken:(AWSSTSGetFederationTokenRequest *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the GetFederationToken service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of AWSTask. On successful execution, task.result will contain an instance of AWSSTSGetFederationTokenResponse. On failed execution, task.error may contain an NSError with AWSSTSErrorDomain domain and the following error code: AWSSTSErrorMalformedPolicyDocument, AWSSTSErrorPackedPolicyTooLarge, AWSSTSErrorRegionDisabled.</Abstract></ReturnValue>
			<Anchor>//api/name/getFederationToken:</Anchor>
            <NodeRef refid="1665"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSSTS/getFederationToken:completionHandler:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Returns a set of temporary security credentials (consisting of an access key ID, a secret access key, and a security token) for a federated user. A typical use is in a proxy application that gets temporary security credentials on behalf of distributed applications inside a corporate network. Because you must call the &lt;code&gt;GetFederationToken&lt;/code&gt; action using the long-term security credentials of an IAM user, this call is appropriate in contexts where those credentials can be safely stored, usually in a server-based application. For a comparison of &lt;code&gt;GetFederationToken&lt;/code&gt; with the other APIs that produce temporary credentials, see IAM Best Practices in the &lt;i&gt;IAM User Guide&lt;/i&gt;. &lt;/p&gt;&lt;p&gt;The temporary security credentials that are obtained by using the long-term credentials of an IAM user are valid for the specified duration, from 900 seconds (15 minutes) up to a maximium of 129600 seconds (36 hours). The default is 43200 seconds (12 hours). Temporary credentials that are obtained by using AWS root account credentials have a maximum duration of 3600 seconds (1 hour).&lt;/p&gt;&lt;p&gt;The temporary security credentials created by &lt;code&gt;GetFederationToken&lt;/code&gt; can be used to make API calls to any AWS service with the following exceptions:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;You cannot use these credentials to call any IAM APIs.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;You cannot call any STS APIs.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;b&gt;Permissions&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The permissions for the temporary security credentials returned by &lt;code&gt;GetFederationToken&lt;/code&gt; are determined by a combination of the following: &lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;The policy or policies that are attached to the IAM user whose credentials are used to call &lt;code&gt;GetFederationToken&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;The policy that is passed as a parameter in the call.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The passed policy is attached to the temporary security credentials that result from the &lt;code&gt;GetFederationToken&lt;/code&gt; API call--that is, to the &lt;i&gt;federated user&lt;/i&gt;. When the federated user makes an AWS request, AWS evaluates the policy attached to the federated user in combination with the policy or policies attached to the IAM user whose credentials were used to call &lt;code&gt;GetFederationToken&lt;/code&gt;. AWS allows the federated user&apos;s request only when both the federated user &lt;i&gt;&lt;b&gt;and&lt;/b&gt;&lt;/i&gt; the IAM user are explicitly allowed to perform the requested action. The passed policy cannot grant more permissions than those that are defined in the IAM user policy.&lt;/p&gt;&lt;p&gt;A typical use case is that the permissions of the IAM user whose credentials are used to call &lt;code&gt;GetFederationToken&lt;/code&gt; are designed to allow access to all the actions and resources that any federated user will need. Then, for individual users, you pass a policy to the operation that scopes down the permissions to a level that&apos;s appropriate to that individual user, using a policy that allows only a subset of permissions that are granted to the IAM user. &lt;/p&gt;&lt;p&gt;If you do not pass a policy, the resulting temporary security credentials have no effective permissions. The only exception is when the temporary security credentials are used to access a resource that has a resource-based policy that specifically allows the federated user to access the resource.&lt;/p&gt;&lt;p&gt;For more information about how permissions work, see GetFederationToken—Federation Through a Custom Identity Broker. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSSTSService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSSTSGetFederationTokenRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSSTSGetFederationTokenResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)getFederationToken:(AWSSTSGetFederationTokenRequest *)request completionHandler:(void ( ^ _Nullable ) ( AWSSTSGetFederationTokenResponse *_Nullable response , NSError *_Nullable error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the GetFederationToken service method.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">The completion handler to call when the load request is complete.
                          response - A response object, or nil if the request failed.
                          error - An error object that indicates why the request failed, or nil if the request was successful. On failed execution, error may contain an NSError with AWSSTSErrorDomain domain and the following error code: AWSSTSErrorMalformedPolicyDocument, AWSSTSErrorPackedPolicyTooLarge, AWSSTSErrorRegionDisabled.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/getFederationToken:completionHandler:</Anchor>
            <NodeRef refid="1665"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSSTS/getSessionToken:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Returns a set of temporary credentials for an AWS account or IAM user. The credentials consist of an access key ID, a secret access key, and a security token. Typically, you use &lt;code&gt;GetSessionToken&lt;/code&gt; if you want to use MFA to protect programmatic calls to specific AWS APIs like Amazon EC2 &lt;code&gt;StopInstances&lt;/code&gt;. MFA-enabled IAM users would need to call &lt;code&gt;GetSessionToken&lt;/code&gt; and submit an MFA code that is associated with their MFA device. Using the temporary security credentials that are returned from the call, IAM users can then make programmatic calls to APIs that require MFA authentication. If you do not supply a correct MFA code, then the API returns an access denied error. For a comparison of &lt;code&gt;GetSessionToken&lt;/code&gt; with the other APIs that produce temporary credentials, see Comparing the AWS STS APIs in the &lt;i&gt;IAM User Guide&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;GetSessionToken&lt;/code&gt; action must be called by using the long-term AWS security credentials of the AWS account or an IAM user. Credentials that are created by IAM users are valid for the duration that you specify, from 900 seconds (15 minutes) up to a maximum of 129600 seconds (36 hours), with a default of 43200 seconds (12 hours); credentials that are created by using account credentials can range from 900 seconds (15 minutes) up to a maximum of 3600 seconds (1 hour), with a default of 1 hour. &lt;/p&gt;&lt;p&gt;The temporary security credentials created by &lt;code&gt;GetSessionToken&lt;/code&gt; can be used to make API calls to any AWS service with the following exceptions:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;You cannot call any IAM APIs unless MFA authentication information is included in the request.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;You cannot call any STS API &lt;i&gt;except&lt;/i&gt;&lt;code&gt;AssumeRole&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;note&gt;&lt;p&gt;We recommend that you do not call &lt;code&gt;GetSessionToken&lt;/code&gt; with root account credentials. Instead, follow our Temporary Credentials for Users in Untrusted Environments in the &lt;i&gt;IAM User Guide&lt;/i&gt;. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSSTSService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSSTSGetSessionTokenRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSSTSGetSessionTokenResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (AWSTask&lt;AWSSTSGetSessionTokenResponse*&gt; *)getSessionToken:(AWSSTSGetSessionTokenRequest *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the GetSessionToken service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of AWSTask. On successful execution, task.result will contain an instance of AWSSTSGetSessionTokenResponse. On failed execution, task.error may contain an NSError with AWSSTSErrorDomain domain and the following error code: AWSSTSErrorRegionDisabled.</Abstract></ReturnValue>
			<Anchor>//api/name/getSessionToken:</Anchor>
            <NodeRef refid="1665"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSSTS/getSessionToken:completionHandler:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Returns a set of temporary credentials for an AWS account or IAM user. The credentials consist of an access key ID, a secret access key, and a security token. Typically, you use &lt;code&gt;GetSessionToken&lt;/code&gt; if you want to use MFA to protect programmatic calls to specific AWS APIs like Amazon EC2 &lt;code&gt;StopInstances&lt;/code&gt;. MFA-enabled IAM users would need to call &lt;code&gt;GetSessionToken&lt;/code&gt; and submit an MFA code that is associated with their MFA device. Using the temporary security credentials that are returned from the call, IAM users can then make programmatic calls to APIs that require MFA authentication. If you do not supply a correct MFA code, then the API returns an access denied error. For a comparison of &lt;code&gt;GetSessionToken&lt;/code&gt; with the other APIs that produce temporary credentials, see Comparing the AWS STS APIs in the &lt;i&gt;IAM User Guide&lt;/i&gt;.&lt;/p&gt;&lt;p&gt;The &lt;code&gt;GetSessionToken&lt;/code&gt; action must be called by using the long-term AWS security credentials of the AWS account or an IAM user. Credentials that are created by IAM users are valid for the duration that you specify, from 900 seconds (15 minutes) up to a maximum of 129600 seconds (36 hours), with a default of 43200 seconds (12 hours); credentials that are created by using account credentials can range from 900 seconds (15 minutes) up to a maximum of 3600 seconds (1 hour), with a default of 1 hour. &lt;/p&gt;&lt;p&gt;The temporary security credentials created by &lt;code&gt;GetSessionToken&lt;/code&gt; can be used to make API calls to any AWS service with the following exceptions:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;You cannot call any IAM APIs unless MFA authentication information is included in the request.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;You cannot call any STS API &lt;i&gt;except&lt;/i&gt;&lt;code&gt;AssumeRole&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;note&gt;&lt;p&gt;We recommend that you do not call &lt;code&gt;GetSessionToken&lt;/code&gt; with root account credentials. Instead, follow our Temporary Credentials for Users in Untrusted Environments in the &lt;i&gt;IAM User Guide&lt;/i&gt;. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSSTSService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSSTSGetSessionTokenRequest</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSSTSGetSessionTokenResponse</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)getSessionToken:(AWSSTSGetSessionTokenRequest *)request completionHandler:(void ( ^ _Nullable ) ( AWSSTSGetSessionTokenResponse *_Nullable response , NSError *_Nullable error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the GetSessionToken service method.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">The completion handler to call when the load request is complete.
                          response - A response object, or nil if the request failed.
                          error - An error object that indicates why the request failed, or nil if the request was successful. On failed execution, error may contain an NSError with AWSSTSErrorDomain domain and the following error code: AWSSTSErrorRegionDisabled.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/getSessionToken:completionHandler:</Anchor>
            <NodeRef refid="1665"/>
		</Token>
		
        
        
	</File>
</Tokens>