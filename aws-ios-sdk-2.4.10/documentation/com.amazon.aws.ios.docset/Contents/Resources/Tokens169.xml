<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/AWSCognitoIdentityLookupDeveloperIdentityInput.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/AWSCognitoIdentityLookupDeveloperIdentityInput</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Input to the &lt;code&gt;LookupDeveloperIdentityInput&lt;/code&gt; action.&lt;/p&gt;
Required parameters: [IdentityPoolId]</Abstract>
			<DeclaredIn>AWSCognitoIdentityModel.h</DeclaredIn>
            
			
			<NodeRef refid="169"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityLookupDeveloperIdentityInput/setDeveloperUserIdentifier:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;A unique ID used by your backend authentication process to identify a user. Typically, a developer identity provider would issue many developer user identifiers, in keeping with the number of users.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentityModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *developerUserIdentifier</Declaration>
			
			
			<Anchor>//api/name/developerUserIdentifier</Anchor>
            <NodeRef refid="169"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityLookupDeveloperIdentityInput/developerUserIdentifier</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;A unique ID used by your backend authentication process to identify a user. Typically, a developer identity provider would issue many developer user identifiers, in keeping with the number of users.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentityModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *developerUserIdentifier</Declaration>
			
			
			<Anchor>//api/name/developerUserIdentifier</Anchor>
            <NodeRef refid="169"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSCognitoIdentityLookupDeveloperIdentityInput/developerUserIdentifier</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;A unique ID used by your backend authentication process to identify a user. Typically, a developer identity provider would issue many developer user identifiers, in keeping with the number of users.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentityModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *developerUserIdentifier</Declaration>
			
			
			<Anchor>//api/name/developerUserIdentifier</Anchor>
            <NodeRef refid="169"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityLookupDeveloperIdentityInput/setIdentityId:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;A unique identifier in the format REGION:GUID.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentityModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *identityId</Declaration>
			
			
			<Anchor>//api/name/identityId</Anchor>
            <NodeRef refid="169"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityLookupDeveloperIdentityInput/identityId</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;A unique identifier in the format REGION:GUID.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentityModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *identityId</Declaration>
			
			
			<Anchor>//api/name/identityId</Anchor>
            <NodeRef refid="169"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSCognitoIdentityLookupDeveloperIdentityInput/identityId</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;A unique identifier in the format REGION:GUID.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentityModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *identityId</Declaration>
			
			
			<Anchor>//api/name/identityId</Anchor>
            <NodeRef refid="169"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityLookupDeveloperIdentityInput/setIdentityPoolId:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;An identity pool ID in the format REGION:GUID.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentityModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *identityPoolId</Declaration>
			
			
			<Anchor>//api/name/identityPoolId</Anchor>
            <NodeRef refid="169"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityLookupDeveloperIdentityInput/identityPoolId</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;An identity pool ID in the format REGION:GUID.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentityModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *identityPoolId</Declaration>
			
			
			<Anchor>//api/name/identityPoolId</Anchor>
            <NodeRef refid="169"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSCognitoIdentityLookupDeveloperIdentityInput/identityPoolId</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;An identity pool ID in the format REGION:GUID.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentityModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *identityPoolId</Declaration>
			
			
			<Anchor>//api/name/identityPoolId</Anchor>
            <NodeRef refid="169"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityLookupDeveloperIdentityInput/setMaxResults:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The maximum number of identities to return.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentityModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *maxResults</Declaration>
			
			
			<Anchor>//api/name/maxResults</Anchor>
            <NodeRef refid="169"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityLookupDeveloperIdentityInput/maxResults</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The maximum number of identities to return.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentityModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *maxResults</Declaration>
			
			
			<Anchor>//api/name/maxResults</Anchor>
            <NodeRef refid="169"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSCognitoIdentityLookupDeveloperIdentityInput/maxResults</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The maximum number of identities to return.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentityModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *maxResults</Declaration>
			
			
			<Anchor>//api/name/maxResults</Anchor>
            <NodeRef refid="169"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityLookupDeveloperIdentityInput/setNextToken:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;A pagination token. The first call you make will have &lt;code&gt;NextToken&lt;/code&gt; set to null. After that the service will return &lt;code&gt;NextToken&lt;/code&gt; values as needed. For example, let&apos;s say you make a request with &lt;code&gt;MaxResults&lt;/code&gt; set to 10, and there are 20 matches in the database. The service will return a pagination token as a part of the response. This token can be used to call the API again and get results starting from the 11th match.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentityModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *nextToken</Declaration>
			
			
			<Anchor>//api/name/nextToken</Anchor>
            <NodeRef refid="169"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityLookupDeveloperIdentityInput/nextToken</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;A pagination token. The first call you make will have &lt;code&gt;NextToken&lt;/code&gt; set to null. After that the service will return &lt;code&gt;NextToken&lt;/code&gt; values as needed. For example, let&apos;s say you make a request with &lt;code&gt;MaxResults&lt;/code&gt; set to 10, and there are 20 matches in the database. The service will return a pagination token as a part of the response. This token can be used to call the API again and get results starting from the 11th match.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentityModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *nextToken</Declaration>
			
			
			<Anchor>//api/name/nextToken</Anchor>
            <NodeRef refid="169"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSCognitoIdentityLookupDeveloperIdentityInput/nextToken</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;A pagination token. The first call you make will have &lt;code&gt;NextToken&lt;/code&gt; set to null. After that the service will return &lt;code&gt;NextToken&lt;/code&gt; values as needed. For example, let&apos;s say you make a request with &lt;code&gt;MaxResults&lt;/code&gt; set to 10, and there are 20 matches in the database. The service will return a pagination token as a part of the response. This token can be used to call the API again and get results starting from the 11th match.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentityModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *nextToken</Declaration>
			
			
			<Anchor>//api/name/nextToken</Anchor>
            <NodeRef refid="169"/>
		</Token>
		
        
        
	</File>
</Tokens>