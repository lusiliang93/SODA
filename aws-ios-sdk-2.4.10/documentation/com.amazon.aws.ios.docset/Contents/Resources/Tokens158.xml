<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/AWSCognitoIdentityGetOpenIdTokenForDeveloperIdentityInput.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/AWSCognitoIdentityGetOpenIdTokenForDeveloperIdentityInput</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Input to the &lt;code&gt;GetOpenIdTokenForDeveloperIdentity&lt;/code&gt; action.&lt;/p&gt;
Required parameters: [IdentityPoolId, Logins]</Abstract>
			<DeclaredIn>AWSCognitoIdentityModel.h</DeclaredIn>
            
			
			<NodeRef refid="158"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityGetOpenIdTokenForDeveloperIdentityInput/setIdentityId:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;A unique identifier in the format REGION:GUID.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentityModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *identityId</Declaration>
			
			
			<Anchor>//api/name/identityId</Anchor>
            <NodeRef refid="158"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityGetOpenIdTokenForDeveloperIdentityInput/identityId</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;A unique identifier in the format REGION:GUID.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentityModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *identityId</Declaration>
			
			
			<Anchor>//api/name/identityId</Anchor>
            <NodeRef refid="158"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSCognitoIdentityGetOpenIdTokenForDeveloperIdentityInput/identityId</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;A unique identifier in the format REGION:GUID.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentityModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *identityId</Declaration>
			
			
			<Anchor>//api/name/identityId</Anchor>
            <NodeRef refid="158"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityGetOpenIdTokenForDeveloperIdentityInput/setIdentityPoolId:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;An identity pool ID in the format REGION:GUID.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentityModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *identityPoolId</Declaration>
			
			
			<Anchor>//api/name/identityPoolId</Anchor>
            <NodeRef refid="158"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityGetOpenIdTokenForDeveloperIdentityInput/identityPoolId</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;An identity pool ID in the format REGION:GUID.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentityModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *identityPoolId</Declaration>
			
			
			<Anchor>//api/name/identityPoolId</Anchor>
            <NodeRef refid="158"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSCognitoIdentityGetOpenIdTokenForDeveloperIdentityInput/identityPoolId</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;An identity pool ID in the format REGION:GUID.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentityModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *identityPoolId</Declaration>
			
			
			<Anchor>//api/name/identityPoolId</Anchor>
            <NodeRef refid="158"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityGetOpenIdTokenForDeveloperIdentityInput/setLogins:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;A set of optional name-value pairs that map provider names to provider tokens. Each name-value pair represents a user from a public provider or developer provider. If the user is from a developer provider, the name-value pair will follow the syntax &lt;code&gt;&quot;developerprovidername&quot;: &quot;developeruseridentifier&quot;&lt;/code&gt;. The developer provider is the &quot;domain&quot; by which Cognito will refer to your users; you provided this domain while creating/updating the identity pool. The developer user identifier is an identifier from your backend that uniquely identifies a user. When you create an identity pool, you can specify the supported logins.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentityModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSDictionary&lt;NSString*NSString*&gt; *logins</Declaration>
			
			
			<Anchor>//api/name/logins</Anchor>
            <NodeRef refid="158"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityGetOpenIdTokenForDeveloperIdentityInput/logins</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;A set of optional name-value pairs that map provider names to provider tokens. Each name-value pair represents a user from a public provider or developer provider. If the user is from a developer provider, the name-value pair will follow the syntax &lt;code&gt;&quot;developerprovidername&quot;: &quot;developeruseridentifier&quot;&lt;/code&gt;. The developer provider is the &quot;domain&quot; by which Cognito will refer to your users; you provided this domain while creating/updating the identity pool. The developer user identifier is an identifier from your backend that uniquely identifies a user. When you create an identity pool, you can specify the supported logins.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentityModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSDictionary&lt;NSString*NSString*&gt; *logins</Declaration>
			
			
			<Anchor>//api/name/logins</Anchor>
            <NodeRef refid="158"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSCognitoIdentityGetOpenIdTokenForDeveloperIdentityInput/logins</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;A set of optional name-value pairs that map provider names to provider tokens. Each name-value pair represents a user from a public provider or developer provider. If the user is from a developer provider, the name-value pair will follow the syntax &lt;code&gt;&quot;developerprovidername&quot;: &quot;developeruseridentifier&quot;&lt;/code&gt;. The developer provider is the &quot;domain&quot; by which Cognito will refer to your users; you provided this domain while creating/updating the identity pool. The developer user identifier is an identifier from your backend that uniquely identifies a user. When you create an identity pool, you can specify the supported logins.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentityModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSDictionary&lt;NSString*NSString*&gt; *logins</Declaration>
			
			
			<Anchor>//api/name/logins</Anchor>
            <NodeRef refid="158"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityGetOpenIdTokenForDeveloperIdentityInput/setTokenDuration:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The expiration time of the token, in seconds. You can specify a custom expiration time for the token so that you can cache it. If you don&apos;t provide an expiration time, the token is valid for 15 minutes. You can exchange the token with Amazon STS for temporary AWS credentials, which are valid for a maximum of one hour. The maximum token duration you can set is 24 hours. You should take care in setting the expiration time for a token, as there are significant security implications: an attacker could use a leaked token to access your AWS resources for the token&apos;s duration.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentityModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *tokenDuration</Declaration>
			
			
			<Anchor>//api/name/tokenDuration</Anchor>
            <NodeRef refid="158"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityGetOpenIdTokenForDeveloperIdentityInput/tokenDuration</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The expiration time of the token, in seconds. You can specify a custom expiration time for the token so that you can cache it. If you don&apos;t provide an expiration time, the token is valid for 15 minutes. You can exchange the token with Amazon STS for temporary AWS credentials, which are valid for a maximum of one hour. The maximum token duration you can set is 24 hours. You should take care in setting the expiration time for a token, as there are significant security implications: an attacker could use a leaked token to access your AWS resources for the token&apos;s duration.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentityModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *tokenDuration</Declaration>
			
			
			<Anchor>//api/name/tokenDuration</Anchor>
            <NodeRef refid="158"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSCognitoIdentityGetOpenIdTokenForDeveloperIdentityInput/tokenDuration</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The expiration time of the token, in seconds. You can specify a custom expiration time for the token so that you can cache it. If you don&apos;t provide an expiration time, the token is valid for 15 minutes. You can exchange the token with Amazon STS for temporary AWS credentials, which are valid for a maximum of one hour. The maximum token duration you can set is 24 hours. You should take care in setting the expiration time for a token, as there are significant security implications: an attacker could use a leaked token to access your AWS resources for the token&apos;s duration.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCognitoIdentityModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *tokenDuration</Declaration>
			
			
			<Anchor>//api/name/tokenDuration</Anchor>
            <NodeRef refid="158"/>
		</Token>
		
        
        
	</File>
</Tokens>