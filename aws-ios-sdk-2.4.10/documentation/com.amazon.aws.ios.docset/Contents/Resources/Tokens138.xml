<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/AWSCognitoDataset.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/AWSCognitoDataset</TokenIdentifier>
			<Abstract type="html">An object that encapsulates the dataset. The dataset is the unit of sync
for Amazon Cognito.</Abstract>
			<DeclaredIn>AWSCognitoDataset.h</DeclaredIn>
            
			
			<NodeRef refid="138"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoDataset/setConflictHandler:</TokenIdentifier>
			<Abstract type="html">A conflict resolution handler that will receive calls when there is a
conflict during a sync operation.  A conflict will occur when both remote and
local data have been updated since the last sync time.
When not explicitly set, we will use the default conflict resolution of
&apos;last writer wins&apos;, where the data most recently updated will be persisted.</Abstract>
			<DeclaredIn>AWSCognitoDataset.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) AWSCognitoRecordConflictHandler conflictHandler</Declaration>
			
			
			<Anchor>//api/name/conflictHandler</Anchor>
            <NodeRef refid="138"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoDataset/conflictHandler</TokenIdentifier>
			<Abstract type="html">A conflict resolution handler that will receive calls when there is a
conflict during a sync operation.  A conflict will occur when both remote and
local data have been updated since the last sync time.
When not explicitly set, we will use the default conflict resolution of
&apos;last writer wins&apos;, where the data most recently updated will be persisted.</Abstract>
			<DeclaredIn>AWSCognitoDataset.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) AWSCognitoRecordConflictHandler conflictHandler</Declaration>
			
			
			<Anchor>//api/name/conflictHandler</Anchor>
            <NodeRef refid="138"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSCognitoDataset/conflictHandler</TokenIdentifier>
			<Abstract type="html">A conflict resolution handler that will receive calls when there is a
conflict during a sync operation.  A conflict will occur when both remote and
local data have been updated since the last sync time.
When not explicitly set, we will use the default conflict resolution of
&apos;last writer wins&apos;, where the data most recently updated will be persisted.</Abstract>
			<DeclaredIn>AWSCognitoDataset.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) AWSCognitoRecordConflictHandler conflictHandler</Declaration>
			
			
			<Anchor>//api/name/conflictHandler</Anchor>
            <NodeRef refid="138"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoDataset/setDatasetDeletedHandler:</TokenIdentifier>
			<Abstract type="html">A deleted dataset handler. This handler will be called during a synchronization
when the remote service indicates that a dataset has been deleted.
Returning YES from the handler will cause the service to recreate the dataset
on the remote on the next synchronization. Returning NO or leaving this property
nil will cause the client to delete the dataset locally.</Abstract>
			<DeclaredIn>AWSCognitoDataset.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) AWSCognitoDatasetDeletedHandler datasetDeletedHandler</Declaration>
			
			
			<Anchor>//api/name/datasetDeletedHandler</Anchor>
            <NodeRef refid="138"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoDataset/datasetDeletedHandler</TokenIdentifier>
			<Abstract type="html">A deleted dataset handler. This handler will be called during a synchronization
when the remote service indicates that a dataset has been deleted.
Returning YES from the handler will cause the service to recreate the dataset
on the remote on the next synchronization. Returning NO or leaving this property
nil will cause the client to delete the dataset locally.</Abstract>
			<DeclaredIn>AWSCognitoDataset.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) AWSCognitoDatasetDeletedHandler datasetDeletedHandler</Declaration>
			
			
			<Anchor>//api/name/datasetDeletedHandler</Anchor>
            <NodeRef refid="138"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSCognitoDataset/datasetDeletedHandler</TokenIdentifier>
			<Abstract type="html">A deleted dataset handler. This handler will be called during a synchronization
when the remote service indicates that a dataset has been deleted.
Returning YES from the handler will cause the service to recreate the dataset
on the remote on the next synchronization. Returning NO or leaving this property
nil will cause the client to delete the dataset locally.</Abstract>
			<DeclaredIn>AWSCognitoDataset.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) AWSCognitoDatasetDeletedHandler datasetDeletedHandler</Declaration>
			
			
			<Anchor>//api/name/datasetDeletedHandler</Anchor>
            <NodeRef refid="138"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoDataset/setDatasetMergedHandler:</TokenIdentifier>
			<Abstract type="html">A merged dataset handler. This handler will be called during a synchronization
when the remote service indicates that other datasets should be merged with this one.
Merged datasets should be fetched, their data overlayed locally and then removed.
Failing to implement this handler will result in merged datasets remaining on the
service indefinitely.</Abstract>
			<DeclaredIn>AWSCognitoDataset.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) AWSCognitoDatasetMergedHandler datasetMergedHandler</Declaration>
			
			
			<Anchor>//api/name/datasetMergedHandler</Anchor>
            <NodeRef refid="138"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoDataset/datasetMergedHandler</TokenIdentifier>
			<Abstract type="html">A merged dataset handler. This handler will be called during a synchronization
when the remote service indicates that other datasets should be merged with this one.
Merged datasets should be fetched, their data overlayed locally and then removed.
Failing to implement this handler will result in merged datasets remaining on the
service indefinitely.</Abstract>
			<DeclaredIn>AWSCognitoDataset.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) AWSCognitoDatasetMergedHandler datasetMergedHandler</Declaration>
			
			
			<Anchor>//api/name/datasetMergedHandler</Anchor>
            <NodeRef refid="138"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSCognitoDataset/datasetMergedHandler</TokenIdentifier>
			<Abstract type="html">A merged dataset handler. This handler will be called during a synchronization
when the remote service indicates that other datasets should be merged with this one.
Merged datasets should be fetched, their data overlayed locally and then removed.
Failing to implement this handler will result in merged datasets remaining on the
service indefinitely.</Abstract>
			<DeclaredIn>AWSCognitoDataset.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) AWSCognitoDatasetMergedHandler datasetMergedHandler</Declaration>
			
			
			<Anchor>//api/name/datasetMergedHandler</Anchor>
            <NodeRef refid="138"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoDataset/setSynchronizeRetries:</TokenIdentifier>
			<Abstract type="html">The number of times to attempt a synchronization before failing. Defaults to
to the value on the AWSCognito client that opened this dataset.</Abstract>
			<DeclaredIn>AWSCognitoDataset.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) uint32_t synchronizeRetries</Declaration>
			
			
			<Anchor>//api/name/synchronizeRetries</Anchor>
            <NodeRef refid="138"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoDataset/synchronizeRetries</TokenIdentifier>
			<Abstract type="html">The number of times to attempt a synchronization before failing. Defaults to
to the value on the AWSCognito client that opened this dataset.</Abstract>
			<DeclaredIn>AWSCognitoDataset.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) uint32_t synchronizeRetries</Declaration>
			
			
			<Anchor>//api/name/synchronizeRetries</Anchor>
            <NodeRef refid="138"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSCognitoDataset/synchronizeRetries</TokenIdentifier>
			<Abstract type="html">The number of times to attempt a synchronization before failing. Defaults to
to the value on the AWSCognito client that opened this dataset.</Abstract>
			<DeclaredIn>AWSCognitoDataset.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) uint32_t synchronizeRetries</Declaration>
			
			
			<Anchor>//api/name/synchronizeRetries</Anchor>
            <NodeRef refid="138"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoDataset/setSynchronizeOnWiFiOnly:</TokenIdentifier>
			<Abstract type="html">Only synchronize if device is on a WiFi network. Defaults to
to the value on the AWSCognito client that opened this dataset.</Abstract>
			<DeclaredIn>AWSCognitoDataset.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL synchronizeOnWiFiOnly</Declaration>
			
			
			<Anchor>//api/name/synchronizeOnWiFiOnly</Anchor>
            <NodeRef refid="138"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoDataset/synchronizeOnWiFiOnly</TokenIdentifier>
			<Abstract type="html">Only synchronize if device is on a WiFi network. Defaults to
to the value on the AWSCognito client that opened this dataset.</Abstract>
			<DeclaredIn>AWSCognitoDataset.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL synchronizeOnWiFiOnly</Declaration>
			
			
			<Anchor>//api/name/synchronizeOnWiFiOnly</Anchor>
            <NodeRef refid="138"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSCognitoDataset/synchronizeOnWiFiOnly</TokenIdentifier>
			<Abstract type="html">Only synchronize if device is on a WiFi network. Defaults to
to the value on the AWSCognito client that opened this dataset.</Abstract>
			<DeclaredIn>AWSCognitoDataset.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) BOOL synchronizeOnWiFiOnly</Declaration>
			
			
			<Anchor>//api/name/synchronizeOnWiFiOnly</Anchor>
            <NodeRef refid="138"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoDataset/setString:forKey:</TokenIdentifier>
			<Abstract type="html">Sets a string object for the specified key in the dataset.</Abstract>
			<DeclaredIn>AWSCognitoDataset.h</DeclaredIn>
			
			<Declaration>- (void)setString:(NSString *)aString forKey:(NSString *)aKey</Declaration>
			
			
			<Anchor>//api/name/setString:forKey:</Anchor>
            <NodeRef refid="138"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoDataset/stringForKey:</TokenIdentifier>
			<Abstract type="html">Returns the string associated with the specified key.</Abstract>
			<DeclaredIn>AWSCognitoDataset.h</DeclaredIn>
			
			<Declaration>- (NSString *)stringForKey:(NSString *)aKey</Declaration>
			
			
			<Anchor>//api/name/stringForKey:</Anchor>
            <NodeRef refid="138"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoDataset/synchronize</TokenIdentifier>
			<Abstract type="html">Synchronize local changes with remote changes on the service.  First it pulls down changes from the service
and attempts to overlay them on the local store.  Then it pushes any local updates to the service.  If at any
point there is a conflict, conflict resolution is invoked.  No changes are pushed to the service until
all conflicts are resolved.</Abstract>
			<DeclaredIn>AWSCognitoDataset.h</DeclaredIn>
			
			<Declaration>- (AWSTask *)synchronize</Declaration>
			
			
			<Anchor>//api/name/synchronize</Anchor>
            <NodeRef refid="138"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoDataset/synchronizeOnConnectivity</TokenIdentifier>
			<Abstract type="html">Attempts to synchronize when device has connectivity.  First it checks connectivity, if device is online
immediately invokes synchronize and returns the AWSTask associated with the attempt.  If the device is offline,
schedules a synchronize for the next time the device comes online and returns a AWSTask with a nil result.
The scheduled synchronize is only valid for the lifecycle of the dataset object.  The data will not be synchronized
if the app is exited before connectivity is regained.  If you want to be notified when events occur during the
scheduled synchronize, you must add observers of the notifications found in AWSCognito</Abstract>
			<DeclaredIn>AWSCognitoDataset.h</DeclaredIn>
			
			<Declaration>- (AWSTask *)synchronizeOnConnectivity</Declaration>
			
			
			<Anchor>//api/name/synchronizeOnConnectivity</Anchor>
            <NodeRef refid="138"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoDataset/subscribe</TokenIdentifier>
			<Abstract type="html">Subscribes this dataset to push notifications</Abstract>
			<DeclaredIn>AWSCognitoDataset.h</DeclaredIn>
			
			<Declaration>- (AWSTask *)subscribe</Declaration>
			
			<ReturnValue><Abstract type="html">AWSTask with nil result. task.error will contain any errors.</Abstract></ReturnValue>
			<Anchor>//api/name/subscribe</Anchor>
            <NodeRef refid="138"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoDataset/unsubscribe</TokenIdentifier>
			<Abstract type="html">Unsubscribes this dataset to push notifications</Abstract>
			<DeclaredIn>AWSCognitoDataset.h</DeclaredIn>
			
			<Declaration>- (AWSTask *)unsubscribe</Declaration>
			
			<ReturnValue><Abstract type="html">AWSTask with nil result. task.error will contain any errors.</Abstract></ReturnValue>
			<Anchor>//api/name/unsubscribe</Anchor>
            <NodeRef refid="138"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoDataset/getAllRecords</TokenIdentifier>
			<Abstract type="html">Returns all of the records in the dataset. Will return deleted records.</Abstract>
			<DeclaredIn>AWSCognitoDataset.h</DeclaredIn>
			
			<Declaration>- (NSArray *)getAllRecords</Declaration>
			
			<ReturnValue><Abstract type="html">NSArray of AWSCognitoRecord objects</Abstract></ReturnValue>
			<Anchor>//api/name/getAllRecords</Anchor>
            <NodeRef refid="138"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoDataset/getAll</TokenIdentifier>
			<Abstract type="html">Returns all the key value pairs in the dataset, ignore any deleted data.</Abstract>
			<DeclaredIn>AWSCognitoDataset.h</DeclaredIn>
			
			<Declaration>- (NSDictionary *)getAll</Declaration>
			
			<ReturnValue><Abstract type="html">NSDictionary of all key value pairs. Contains no metadata.</Abstract></ReturnValue>
			<Anchor>//api/name/getAll</Anchor>
            <NodeRef refid="138"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoDataset/removeObjectForKey:</TokenIdentifier>
			<Abstract type="html">Remove a record from the dataset.</Abstract>
			<DeclaredIn>AWSCognitoDataset.h</DeclaredIn>
			
			<Declaration>- (void)removeObjectForKey:(NSString *)aKey</Declaration>
			<Parameters>
				<Parameter>
					<Name>aKey</Name>
					<Abstract type="html">the key to remove</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/removeObjectForKey:</Anchor>
            <NodeRef refid="138"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoDataset/recordForKey:</TokenIdentifier>
			<Abstract type="html">Returns the record associated with the specified key.</Abstract>
			<DeclaredIn>AWSCognitoDataset.h</DeclaredIn>
			
			<Declaration>- (AWSCognitoRecord *)recordForKey:(NSString *)aKey</Declaration>
			<Parameters>
				<Parameter>
					<Name>aKey</Name>
					<Abstract type="html">the key to return</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">AWSCognitoRecord for this particular record. Will return nil if record does not exist.</Abstract></ReturnValue>
			<Anchor>//api/name/recordForKey:</Anchor>
            <NodeRef refid="138"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoDataset/clear</TokenIdentifier>
			<Abstract type="html">Clear this dataset locally.  Dataset will not be removed from the service until the next synchronize call.</Abstract>
			<DeclaredIn>AWSCognitoDataset.h</DeclaredIn>
			
			<Declaration>- (void)clear</Declaration>
			
			
			<Anchor>//api/name/clear</Anchor>
            <NodeRef refid="138"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoDataset/size</TokenIdentifier>
			<Abstract type="html">Returns the size in bytes for this dataset.</Abstract>
			<DeclaredIn>AWSCognitoDataset.h</DeclaredIn>
			
			<Declaration>- (long)size</Declaration>
			
			
			<Anchor>//api/name/size</Anchor>
            <NodeRef refid="138"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoDataset/sizeForKey:</TokenIdentifier>
			<Abstract type="html">Returns the size in bytes for the specified key.</Abstract>
			<DeclaredIn>AWSCognitoDataset.h</DeclaredIn>
			
			<Declaration>- (long)sizeForKey:(NSString *)aKey</Declaration>
			<Parameters>
				<Parameter>
					<Name>aKey</Name>
					<Abstract type="html">the key to check</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/sizeForKey:</Anchor>
            <NodeRef refid="138"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoDataset/syncPull:</TokenIdentifier>
			<Abstract type="html">The pull part of our sync
1. Do a list records, overlay changes
2. Resolve conflicts</Abstract>
			<DeclaredIn>AWSCognitoDataset.m</DeclaredIn>
			
			<Declaration>- (AWSTask *)syncPull:(uint32_t)remainingAttempts</Declaration>
			
			
			<Anchor>//api/name/syncPull:</Anchor>
            <NodeRef refid="138"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoDataset/syncPush:</TokenIdentifier>
			<Abstract type="html">The push part of the sync
1. Write any changes to remote
2. Restart sync if errors occur</Abstract>
			<DeclaredIn>AWSCognitoDataset.m</DeclaredIn>
			
			<Declaration>- (AWSTask *)syncPush:(uint32_t)remainingAttempts</Declaration>
			
			
			<Anchor>//api/name/syncPush:</Anchor>
            <NodeRef refid="138"/>
		</Token>
		
        
        
	</File>
</Tokens>