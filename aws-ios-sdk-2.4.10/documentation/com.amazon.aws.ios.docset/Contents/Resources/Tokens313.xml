<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/AWSCognitoIdentityUser.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/AWSCognitoIdentityUser</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.h</DeclaredIn>
            
			
			<NodeRef refid="313"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityUser/setUsername:</TokenIdentifier>
			<Abstract type="html">The username of this user</Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, nullable) NSString *username</Declaration>
			
			
			<Anchor>//api/name/username</Anchor>
            <NodeRef refid="313"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityUser/username</TokenIdentifier>
			<Abstract type="html">The username of this user</Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, nullable) NSString *username</Declaration>
			
			
			<Anchor>//api/name/username</Anchor>
            <NodeRef refid="313"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSCognitoIdentityUser/username</TokenIdentifier>
			<Abstract type="html">The username of this user</Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, nullable) NSString *username</Declaration>
			
			
			<Anchor>//api/name/username</Anchor>
            <NodeRef refid="313"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityUser/setConfirmedStatus:</TokenIdentifier>
			<Abstract type="html">If this user is a result of a signup, this has the confirmation status</Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) AWSCognitoIdentityUserStatus confirmedStatus</Declaration>
			
			
			<Anchor>//api/name/confirmedStatus</Anchor>
            <NodeRef refid="313"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityUser/confirmedStatus</TokenIdentifier>
			<Abstract type="html">If this user is a result of a signup, this has the confirmation status</Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) AWSCognitoIdentityUserStatus confirmedStatus</Declaration>
			
			
			<Anchor>//api/name/confirmedStatus</Anchor>
            <NodeRef refid="313"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSCognitoIdentityUser/confirmedStatus</TokenIdentifier>
			<Abstract type="html">If this user is a result of a signup, this has the confirmation status</Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) AWSCognitoIdentityUserStatus confirmedStatus</Declaration>
			
			
			<Anchor>//api/name/confirmedStatus</Anchor>
            <NodeRef refid="313"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityUser/setSignedIn:</TokenIdentifier>
			<Abstract type="html">Determines whether this user has an active session or not. If the refresh token is expired
the user will be prompted to authenticate when you call getSession.</Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, getter=isSignedIn) BOOL signedIn</Declaration>
			
			
			<Anchor>//api/name/signedIn</Anchor>
            <NodeRef refid="313"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityUser/isSignedIn</TokenIdentifier>
			<Abstract type="html">Determines whether this user has an active session or not. If the refresh token is expired
the user will be prompted to authenticate when you call getSession.</Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, getter=isSignedIn) BOOL signedIn</Declaration>
			
			
			<Anchor>//api/name/signedIn</Anchor>
            <NodeRef refid="313"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSCognitoIdentityUser/signedIn</TokenIdentifier>
			<Abstract type="html">Determines whether this user has an active session or not. If the refresh token is expired
the user will be prompted to authenticate when you call getSession.</Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly, getter=isSignedIn) BOOL signedIn</Declaration>
			
			
			<Anchor>//api/name/signedIn</Anchor>
            <NodeRef refid="313"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityUser/setDeviceId:</TokenIdentifier>
			<Abstract type="html">Get the device id</Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSString *deviceId</Declaration>
			
			
			<Anchor>//api/name/deviceId</Anchor>
            <NodeRef refid="313"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityUser/deviceId</TokenIdentifier>
			<Abstract type="html">Get the device id</Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSString *deviceId</Declaration>
			
			
			<Anchor>//api/name/deviceId</Anchor>
            <NodeRef refid="313"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSCognitoIdentityUser/deviceId</TokenIdentifier>
			<Abstract type="html">Get the device id</Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, readonly) NSString *deviceId</Declaration>
			
			
			<Anchor>//api/name/deviceId</Anchor>
            <NodeRef refid="313"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityUser/confirmSignUp:</TokenIdentifier>
			<Abstract type="html">Confirm a users&apos; sign up with the confirmation code</Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.h</DeclaredIn>
			
			<Declaration>- (AWSTask&lt;AWSCognitoIdentityUserConfirmSignUpResponse*&gt; *)confirmSignUp:(NSString *)confirmationCode</Declaration>
			
			
			<Anchor>//api/name/confirmSignUp:</Anchor>
            <NodeRef refid="313"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityUser/confirmSignUp:forceAliasCreation:</TokenIdentifier>
			<Abstract type="html">Confirm a users&apos; sign up with the confirmation code.  If forceAliasCreation is set, if another user is aliased to the same email/phone this code was sent to, reassign alias to this user.</Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.h</DeclaredIn>
			
			<Declaration>- (AWSTask&lt;AWSCognitoIdentityUserConfirmSignUpResponse*&gt; *)confirmSignUp:(NSString *)confirmationCode forceAliasCreation:(BOOL)forceAliasCreation</Declaration>
			
			
			<Anchor>//api/name/confirmSignUp:forceAliasCreation:</Anchor>
            <NodeRef refid="313"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityUser/resendConfirmationCode</TokenIdentifier>
			<Abstract type="html">Resend the confirmation code sent during sign up</Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.h</DeclaredIn>
			
			<Declaration>- (AWSTask&lt;AWSCognitoIdentityUserResendConfirmationCodeResponse*&gt; *)resendConfirmationCode</Declaration>
			
			
			<Anchor>//api/name/resendConfirmationCode</Anchor>
            <NodeRef refid="313"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityUser/getSession</TokenIdentifier>
			<Abstract type="html">Get a session with id, access and refresh tokens.</Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.h</DeclaredIn>
			
			<Declaration>- (AWSTask&lt;AWSCognitoIdentityUserSession*&gt; *)getSession</Declaration>
			
			
			<Anchor>//api/name/getSession</Anchor>
            <NodeRef refid="313"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityUser/getSession:</TokenIdentifier>
			<Abstract type="html">Get a session with custom scopes.</Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.h</DeclaredIn>
			
			<Declaration>- (AWSTask&lt;AWSCognitoIdentityUserSession*&gt; *)getSession:(nullable NSSet&lt;NSString*&gt; *)scopes</Declaration>
			
			
			<Anchor>//api/name/getSession:</Anchor>
            <NodeRef refid="313"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityUser/getSession:password:validationData:</TokenIdentifier>
			<Abstract type="html">Get a session with the following username and password</Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.h</DeclaredIn>
			
			<Declaration>- (AWSTask&lt;AWSCognitoIdentityUserSession*&gt; *)getSession:(NSString *)username password:(NSString *)password validationData:(nullable NSArray&lt;AWSCognitoIdentityUserAttributeType*&gt; *)validationData</Declaration>
			
			
			<Anchor>//api/name/getSession:password:validationData:</Anchor>
            <NodeRef refid="313"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityUser/getSession:password:validationData:scopes:</TokenIdentifier>
			<Abstract type="html">Get a session with the following username and password with custom scopes</Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.h</DeclaredIn>
			
			<Declaration>- (AWSTask&lt;AWSCognitoIdentityUserSession*&gt; *)getSession:(NSString *)username password:(NSString *)password validationData:(nullable NSArray&lt;AWSCognitoIdentityUserAttributeType*&gt; *)validationData scopes:(nullable NSSet&lt;NSString*&gt; *)scopes</Declaration>
			
			
			<Anchor>//api/name/getSession:password:validationData:scopes:</Anchor>
            <NodeRef refid="313"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityUser/getDetails</TokenIdentifier>
			<Abstract type="html">Get details about this user, including user attributes</Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.h</DeclaredIn>
			
			<Declaration>- (AWSTask&lt;AWSCognitoIdentityUserGetDetailsResponse*&gt; *)getDetails</Declaration>
			
			
			<Anchor>//api/name/getDetails</Anchor>
            <NodeRef refid="313"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityUser/forgotPassword</TokenIdentifier>
			<Abstract type="html">Send a code to this user to initiate the forgot password flow</Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.h</DeclaredIn>
			
			<Declaration>- (AWSTask&lt;AWSCognitoIdentityUserForgotPasswordResponse*&gt; *)forgotPassword</Declaration>
			
			
			<Anchor>//api/name/forgotPassword</Anchor>
            <NodeRef refid="313"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityUser/confirmForgotPassword:password:</TokenIdentifier>
			<Abstract type="html">Conclude the forgot password flow by providing the forgot password code and new password.</Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.h</DeclaredIn>
			
			<Declaration>- (AWSTask&lt;AWSCognitoIdentityUserConfirmForgotPasswordResponse*&gt; *)confirmForgotPassword:(NSString *)confirmationCode password:(NSString *)password</Declaration>
			
			
			<Anchor>//api/name/confirmForgotPassword:password:</Anchor>
            <NodeRef refid="313"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityUser/changePassword:proposedPassword:</TokenIdentifier>
			<Abstract type="html">Change this user&apos;s password</Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.h</DeclaredIn>
			
			<Declaration>- (AWSTask&lt;AWSCognitoIdentityUserChangePasswordResponse*&gt; *)changePassword:(NSString *)currentPassword proposedPassword:(NSString *)proposedPassword</Declaration>
			
			
			<Anchor>//api/name/changePassword:proposedPassword:</Anchor>
            <NodeRef refid="313"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityUser/updateAttributes:</TokenIdentifier>
			<Abstract type="html">Update this user&apos;s attributes</Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.h</DeclaredIn>
			
			<Declaration>- (AWSTask&lt;AWSCognitoIdentityUserUpdateAttributesResponse*&gt; *)updateAttributes:(NSArray&lt;AWSCognitoIdentityUserAttributeType*&gt; *)attributes</Declaration>
			
			
			<Anchor>//api/name/updateAttributes:</Anchor>
            <NodeRef refid="313"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityUser/deleteAttributes:</TokenIdentifier>
			<Abstract type="html">Delete the attributes specified by attributeNames</Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.h</DeclaredIn>
			
			<Declaration>- (AWSTask&lt;AWSCognitoIdentityUserDeleteAttributesResponse*&gt; *)deleteAttributes:(NSArray&lt;NSString*&gt; *)attributeNames</Declaration>
			
			
			<Anchor>//api/name/deleteAttributes:</Anchor>
            <NodeRef refid="313"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityUser/verifyAttribute:code:</TokenIdentifier>
			<Abstract type="html">Verify a user attribute upon receiving the verification code.</Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.h</DeclaredIn>
			
			<Declaration>- (AWSTask&lt;AWSCognitoIdentityUserVerifyAttributeResponse*&gt; *)verifyAttribute:(NSString *)attributeName code:(NSString *)code</Declaration>
			
			
			<Anchor>//api/name/verifyAttribute:code:</Anchor>
            <NodeRef refid="313"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityUser/getAttributeVerificationCode:</TokenIdentifier>
			<Abstract type="html">Request a verification code to verify an attribute.</Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.h</DeclaredIn>
			
			<Declaration>- (AWSTask&lt;AWSCognitoIdentityUserGetAttributeVerificationCodeResponse*&gt; *)getAttributeVerificationCode:(NSString *)attributeName</Declaration>
			
			
			<Anchor>//api/name/getAttributeVerificationCode:</Anchor>
            <NodeRef refid="313"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityUser/setUserSettings:</TokenIdentifier>
			<Abstract type="html">Set the user settings for this user such as MFA</Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.h</DeclaredIn>
			
			<Declaration>- (AWSTask&lt;AWSCognitoIdentityUserSetUserSettingsResponse*&gt; *)setUserSettings:(AWSCognitoIdentityUserSettings *)settings</Declaration>
			
			
			<Anchor>//api/name/setUserSettings:</Anchor>
            <NodeRef refid="313"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityUser/deleteUser</TokenIdentifier>
			<Abstract type="html">Delete this user</Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.h</DeclaredIn>
			
			<Declaration>- (AWSTask *)deleteUser</Declaration>
			
			
			<Anchor>//api/name/deleteUser</Anchor>
            <NodeRef refid="313"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityUser/signOut</TokenIdentifier>
			<Abstract type="html">Remove all sessions from the keychain for this user.  Last known user remains.</Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.h</DeclaredIn>
			
			<Declaration>- (void)signOut</Declaration>
			
			
			<Anchor>//api/name/signOut</Anchor>
            <NodeRef refid="313"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityUser/globalSignOut</TokenIdentifier>
			<Abstract type="html">Invalidate any active sessions with the service.  Last known user remains.</Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.h</DeclaredIn>
			
			<Declaration>- (AWSTask&lt;AWSCognitoIdentityUserGlobalSignOutResponse*&gt; *)globalSignOut</Declaration>
			
			
			<Anchor>//api/name/globalSignOut</Anchor>
            <NodeRef refid="313"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityUser/signOutAndClearLastKnownUser</TokenIdentifier>
			<Abstract type="html">Remove all sessions from the keychain for this user and clear last known user.</Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.h</DeclaredIn>
			
			<Declaration>- (void)signOutAndClearLastKnownUser</Declaration>
			
			
			<Anchor>//api/name/signOutAndClearLastKnownUser</Anchor>
            <NodeRef refid="313"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityUser/listDevices:paginationToken:</TokenIdentifier>
			<Abstract type="html">List devices for this user</Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.h</DeclaredIn>
			
			<Declaration>- (AWSTask&lt;AWSCognitoIdentityUserListDevicesResponse*&gt; *)listDevices:(int)limit paginationToken:(NSString *_Nullable)paginationToken</Declaration>
			
			
			<Anchor>//api/name/listDevices:paginationToken:</Anchor>
            <NodeRef refid="313"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityUser/updateDeviceStatus:remembered:</TokenIdentifier>
			<Abstract type="html">Update device remembered status for a specific device id.</Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.h</DeclaredIn>
			
			<Declaration>- (AWSTask&lt;AWSCognitoIdentityUserUpdateDeviceStatusResponse*&gt; *)updateDeviceStatus:(NSString *)deviceId remembered:(BOOL)remembered</Declaration>
			
			
			<Anchor>//api/name/updateDeviceStatus:remembered:</Anchor>
            <NodeRef refid="313"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityUser/updateDeviceStatus:</TokenIdentifier>
			<Abstract type="html">Convenience method to update device remembered status for this device.</Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.h</DeclaredIn>
			
			<Declaration>- (AWSTask&lt;AWSCognitoIdentityUserUpdateDeviceStatusResponse*&gt; *)updateDeviceStatus:(BOOL)remembered</Declaration>
			
			
			<Anchor>//api/name/updateDeviceStatus:</Anchor>
            <NodeRef refid="313"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityUser/getDevice:</TokenIdentifier>
			<Abstract type="html">Get device details for a specific deviceId.</Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.h</DeclaredIn>
			
			<Declaration>- (AWSTask&lt;AWSCognitoIdentityUserGetDeviceResponse*&gt; *)getDevice:(NSString *)deviceId</Declaration>
			
			
			<Anchor>//api/name/getDevice:</Anchor>
            <NodeRef refid="313"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityUser/getDevice</TokenIdentifier>
			<Abstract type="html">Convenience method to get device details for this device.</Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.h</DeclaredIn>
			
			<Declaration>- (AWSTask&lt;AWSCognitoIdentityUserGetDeviceResponse*&gt; *)getDevice</Declaration>
			
			
			<Anchor>//api/name/getDevice</Anchor>
            <NodeRef refid="313"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityUser/forgetDevice:</TokenIdentifier>
			<Abstract type="html">Forget (stop tracking) a specific deviceId.</Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.h</DeclaredIn>
			
			<Declaration>- (AWSTask *)forgetDevice:(NSString *)deviceId</Declaration>
			
			
			<Anchor>//api/name/forgetDevice:</Anchor>
            <NodeRef refid="313"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityUser/forgetDevice</TokenIdentifier>
			<Abstract type="html">Forget (stop tracking) this device.</Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.h</DeclaredIn>
			
			<Declaration>- (AWSTask *)forgetDevice</Declaration>
			
			
			<Anchor>//api/name/forgetDevice</Anchor>
            <NodeRef refid="313"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityUser/confirmDeviceInternal:</TokenIdentifier>
			<Abstract type="html">Generates a device password, calls service to exchange the password verifier and prompts user to remember the device as required.</Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.m</DeclaredIn>
			
			<Declaration>- (AWSTask *)confirmDeviceInternal:(AWSCognitoIdentityProviderAuthenticationResultType *)authResult</Declaration>
			
			
			<Anchor>//api/name/confirmDeviceInternal:</Anchor>
            <NodeRef refid="313"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityUser/interactiveAuth</TokenIdentifier>
			<Abstract type="html">Kick off interactive auth to prompt developer to challenge end user for credentials</Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.m</DeclaredIn>
			
			<Declaration>- (AWSTask&lt;AWSCognitoIdentityUserSession*&gt; *)interactiveAuth</Declaration>
			
			
			<Anchor>//api/name/interactiveAuth</Anchor>
            <NodeRef refid="313"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityUser/passwordAuthInternal:lastChallenge:isInitialCustomChallenge:</TokenIdentifier>
			<Abstract type="html">Prompt developer to obtain username/password and do SRP auth</Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.m</DeclaredIn>
			
			<Declaration>- (AWSTask&lt;AWSCognitoIdentityUserSession*&gt; *)passwordAuthInternal:(id&lt;AWSCognitoIdentityPasswordAuthentication&gt;)authenticationDelegate lastChallenge:(AWSCognitoIdentityProviderRespondToAuthChallengeResponse *)lastChallenge isInitialCustomChallenge:(BOOL)isInitialCustomChallenge</Declaration>
			
			
			<Anchor>//api/name/passwordAuthInternal:lastChallenge:isInitialCustomChallenge:</Anchor>
            <NodeRef refid="313"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityUser/customAuthInternal:</TokenIdentifier>
			<Abstract type="html">Prompt developer to obtain custom challenge details</Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.m</DeclaredIn>
			
			<Declaration>- (AWSTask&lt;AWSCognitoIdentityUserSession*&gt; *)customAuthInternal:(id&lt;AWSCognitoIdentityCustomAuthentication&gt;)authenticationDelegate</Declaration>
			
			
			<Anchor>//api/name/customAuthInternal:</Anchor>
            <NodeRef refid="313"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityUser/performInitiateCustomAuthChallenge:</TokenIdentifier>
			<Abstract type="html">Run initiate auth on challenge responses from end user for custom auth</Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.m</DeclaredIn>
			
			<Declaration>- (AWSTask&lt;AWSCognitoIdentityProviderInitiateAuthResponse*&gt; *)performInitiateCustomAuthChallenge:(AWSCognitoIdentityCustomChallengeDetails *)challengeDetails</Declaration>
			
			
			<Anchor>//api/name/performInitiateCustomAuthChallenge:</Anchor>
            <NodeRef refid="313"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityUser/performRespondCustomAuthChallenge:session:</TokenIdentifier>
			<Abstract type="html">Run respond to auth challenges on challenge responses from end user for custom auth</Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.m</DeclaredIn>
			
			<Declaration>- (AWSTask&lt;AWSCognitoIdentityProviderRespondToAuthChallengeResponse*&gt; *)performRespondCustomAuthChallenge:(AWSCognitoIdentityCustomChallengeDetails *)challengeDetails session:(NSString *)session</Declaration>
			
			
			<Anchor>//api/name/performRespondCustomAuthChallenge:session:</Anchor>
            <NodeRef refid="313"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityUser/performRespondToNewPasswordChallenge:session:</TokenIdentifier>
			<Abstract type="html">Run respond to auth challenges on new password required responses from end user</Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.m</DeclaredIn>
			
			<Declaration>- (AWSTask&lt;AWSCognitoIdentityProviderRespondToAuthChallengeResponse*&gt; *)performRespondToNewPasswordChallenge:(AWSCognitoIdentityNewPasswordRequiredDetails *)details session:(NSString *)session</Declaration>
			
			
			<Anchor>//api/name/performRespondToNewPasswordChallenge:session:</Anchor>
            <NodeRef refid="313"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityUser/srpAuthInternal:password:validationData:lastChallenge:isInitialCustomChallenge:</TokenIdentifier>
			<Abstract type="html">Perform SRP based authentication (initiateAuth(SRP_AUTH) and respondToAuthChallenge) given a username and password. If lastChallenge is supplied it starts with respondToAuthChallenge instead of initiate.</Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.m</DeclaredIn>
			
			<Declaration>- (AWSTask&lt;AWSCognitoIdentityProviderRespondToAuthChallengeResponse*&gt; *)srpAuthInternal:(NSString *)username password:(NSString *)password validationData:(NSArray&lt;AWSCognitoIdentityUserAttributeType*&gt; *)validationData lastChallenge:(AWSCognitoIdentityProviderRespondToAuthChallengeResponse *)lastChallenge isInitialCustomChallenge:(BOOL)isInitialCustomChallenge</Declaration>
			
			
			<Anchor>//api/name/srpAuthInternal:password:validationData:lastChallenge:isInitialCustomChallenge:</Anchor>
            <NodeRef refid="313"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityUser/deviceAuthInternal:</TokenIdentifier>
			<Abstract type="html">Perform SRP based authentication (initiateAuth(SRP_AUTH) and respondToAuthChallenge) given a username and password</Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.m</DeclaredIn>
			
			<Declaration>- (AWSTask&lt;AWSCognitoIdentityProviderRespondToAuthChallengeResponse*&gt; *)deviceAuthInternal:(AWSTask&lt;AWSCognitoIdentityProviderRespondToAuthChallengeResponse*&gt; *)deviceChallengeResponse</Declaration>
			
			
			<Anchor>//api/name/deviceAuthInternal:</Anchor>
            <NodeRef refid="313"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityUser/addDeviceKey:</TokenIdentifier>
			<Abstract type="html">Adds a device key to the authParameters dictionary if it is known for this username</Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.m</DeclaredIn>
			
			<Declaration>- (void)addDeviceKey:(NSMutableDictionary&lt;NSString*,NSString*&gt; *)authParameters</Declaration>
			
			
			<Anchor>//api/name/addDeviceKey:</Anchor>
            <NodeRef refid="313"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityUser/addSecretHashDeviceKeyAndUsername:</TokenIdentifier>
			<Abstract type="html">Adds a SECRETHASH and USERNAME and DEVICEKEY to the authParameters dictionary.</Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.m</DeclaredIn>
			
			<Declaration>- (void)addSecretHashDeviceKeyAndUsername:(NSMutableDictionary&lt;NSString*,NSString*&gt; *)authParameters</Declaration>
			
			
			<Anchor>//api/name/addSecretHashDeviceKeyAndUsername:</Anchor>
            <NodeRef refid="313"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityUser/mfaAuthInternal:destination:authState:authenticationDelegate:</TokenIdentifier>
			<Abstract type="html">Invoke developer&apos;s ui to prompt user for mfa code and call enhanceAuth</Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.m</DeclaredIn>
			
			<Declaration>- (AWSTask&lt;AWSCognitoIdentityUserSession*&gt; *)mfaAuthInternal:(NSString *)deliveryMedium destination:(NSString *)destination authState:(NSString *)authState authenticationDelegate:(id&lt;AWSCognitoIdentityMultiFactorAuthentication&gt;)authenticationDelegate</Declaration>
			
			
			<Anchor>//api/name/mfaAuthInternal:destination:authState:authenticationDelegate:</Anchor>
            <NodeRef refid="313"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCognitoIdentityUser/keyChainKey:key:</TokenIdentifier>
			<Abstract type="html">Get a namespaced keychain key given a namespace and key</Abstract>
			<DeclaredIn>AWSCognitoIdentityUser.m</DeclaredIn>
			
			<Declaration>- (NSString *)keyChainKey:(NSString *)namespace key:(const NSString *)key</Declaration>
			
			
			<Anchor>//api/name/keyChainKey:key:</Anchor>
            <NodeRef refid="313"/>
		</Token>
		
        
        
	</File>
</Tokens>