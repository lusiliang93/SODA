<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/AWSElasticLoadBalancing.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancing</TokenIdentifier>
			<Abstract type="html">&lt;fullname&gt;Elastic Load Balancing&lt;/fullname&gt;&lt;p&gt;A load balancer distributes incoming traffic across your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered instances and ensures that it routes traffic only to healthy instances. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer and a protocol and port number for connections from the load balancer to the instances.&lt;/p&gt;&lt;p&gt;Elastic Load Balancing supports two types of load balancers: Classic load balancers and Application load balancers (new). A Classic load balancer makes routing and load balancing decisions either at the transport layer (TCP/SSL) or the application layer (HTTP/HTTPS), and supports either EC2-Classic or a VPC. An Application load balancer makes routing and load balancing decisions at the application layer (HTTP/HTTPS), supports path-based routing, and can route requests to one or more ports on each EC2 instance or container instance in your virtual private cloud (VPC). For more information, see the .&lt;/p&gt;&lt;p&gt;This reference covers the 2012-06-01 API, which supports Classic load balancers. The 2015-12-01 API supports Application load balancers.&lt;/p&gt;&lt;p&gt;To get started, create a load balancer with one or more listeners using &lt;a&gt;CreateLoadBalancer&lt;/a&gt;. Register your instances with the load balancer using &lt;a&gt;RegisterInstancesWithLoadBalancer&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;All Elastic Load Balancing operations are &lt;i&gt;idempotent&lt;/i&gt;, which means that they complete at most one time. If you repeat an operation, it succeeds with a 200 OK response code.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
            
			
			<NodeRef refid="959"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/setConfiguration:</TokenIdentifier>
			<Abstract type="html">The service configuration used to instantiate this service client.</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) AWSServiceConfiguration *configuration</Declaration>
			
			
			<Anchor>//api/name/configuration</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/configuration</TokenIdentifier>
			<Abstract type="html">The service configuration used to instantiate this service client.</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) AWSServiceConfiguration *configuration</Declaration>
			
			
			<Anchor>//api/name/configuration</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSElasticLoadBalancing/configuration</TokenIdentifier>
			<Abstract type="html">The service configuration used to instantiate this service client.</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong, readonly) AWSServiceConfiguration *configuration</Declaration>
			
			
			<Anchor>//api/name/configuration</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AWSElasticLoadBalancing/defaultElasticLoadBalancing</TokenIdentifier>
			<Abstract type="html">Returns the singleton service client. If the singleton object does not exist, the SDK instantiates the default service client with defaultServiceConfiguration from [AWSServiceManager defaultServiceManager]. The reference to this object is maintained by the SDK, and you do not need to retain it manually.</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
			<Declaration>+ (instancetype)defaultElasticLoadBalancing</Declaration>
			
			<ReturnValue><Abstract type="html">The default service client.</Abstract></ReturnValue>
			<Anchor>//api/name/defaultElasticLoadBalancing</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AWSElasticLoadBalancing/registerElasticLoadBalancingWithConfiguration:forKey:</TokenIdentifier>
			<Abstract type="html">Creates a service client with the given service configuration and registers it for the key.</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
			<Declaration>+ (void)registerElasticLoadBalancingWithConfiguration:(AWSServiceConfiguration *)configuration forKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>configuration</Name>
					<Abstract type="html">A service configuration object.</Abstract>
				</Parameter><Parameter>
					<Name>key</Name>
					<Abstract type="html">A string to identify the service client.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/registerElasticLoadBalancingWithConfiguration:forKey:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AWSElasticLoadBalancing/ElasticLoadBalancingForKey:</TokenIdentifier>
			<Abstract type="html">Retrieves the service client associated with the key. You need to call + registerElasticLoadBalancingWithConfiguration:forKey: before invoking this method.</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
			<Declaration>+ (instancetype)ElasticLoadBalancingForKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">A string to identify the service client.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of the service client.</Abstract></ReturnValue>
			<Anchor>//api/name/ElasticLoadBalancingForKey:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/AWSElasticLoadBalancing/removeElasticLoadBalancingForKey:</TokenIdentifier>
			<Abstract type="html">Removes the service client associated with the key and release it.</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
			<Declaration>+ (void)removeElasticLoadBalancingForKey:(NSString *)key</Declaration>
			<Parameters>
				<Parameter>
					<Name>key</Name>
					<Abstract type="html">A string to identify the service client.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/removeElasticLoadBalancingForKey:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/addTags:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Adds the specified tags to the specified load balancer. Each load balancer can have a maximum of 10 tags.&lt;/p&gt;&lt;p&gt;Each tag consists of a key and an optional value. If a tag with the same key is already associated with the load balancer, &lt;code&gt;AddTags&lt;/code&gt; updates its value.&lt;/p&gt;&lt;p&gt;For more information, see Tag Your Classic Load Balancer in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingAddTagsInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingAddTagsOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (AWSTask&lt;AWSElasticLoadBalancingAddTagsOutput*&gt; *)addTags:(AWSElasticLoadBalancingAddTagsInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the AddTags service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of AWSTask. On successful execution, task.result will contain an instance of AWSElasticLoadBalancingAddTagsOutput. On failed execution, task.error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorAccessPointNotFound, AWSElasticLoadBalancingErrorTooManyTags, AWSElasticLoadBalancingErrorDuplicateTagKeys.</Abstract></ReturnValue>
			<Anchor>//api/name/addTags:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/addTags:completionHandler:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Adds the specified tags to the specified load balancer. Each load balancer can have a maximum of 10 tags.&lt;/p&gt;&lt;p&gt;Each tag consists of a key and an optional value. If a tag with the same key is already associated with the load balancer, &lt;code&gt;AddTags&lt;/code&gt; updates its value.&lt;/p&gt;&lt;p&gt;For more information, see Tag Your Classic Load Balancer in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingAddTagsInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingAddTagsOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)addTags:(AWSElasticLoadBalancingAddTagsInput *)request completionHandler:(void ( ^ _Nullable ) ( AWSElasticLoadBalancingAddTagsOutput *_Nullable response , NSError *_Nullable error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the AddTags service method.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">The completion handler to call when the load request is complete.
                          response - A response object, or nil if the request failed.
                          error - An error object that indicates why the request failed, or nil if the request was successful. On failed execution, error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorAccessPointNotFound, AWSElasticLoadBalancingErrorTooManyTags, AWSElasticLoadBalancingErrorDuplicateTagKeys.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/addTags:completionHandler:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/applySecurityGroupsToLoadBalancer:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Associates one or more security groups with your load balancer in a virtual private cloud (VPC). The specified security groups override the previously associated security groups.&lt;/p&gt;&lt;p&gt;For more information, see Security Groups for Load Balancers in a VPC in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingApplySecurityGroupsToLoadBalancerInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingApplySecurityGroupsToLoadBalancerOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (AWSTask&lt;AWSElasticLoadBalancingApplySecurityGroupsToLoadBalancerOutput*&gt; *)applySecurityGroupsToLoadBalancer:(AWSElasticLoadBalancingApplySecurityGroupsToLoadBalancerInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the ApplySecurityGroupsToLoadBalancer service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of AWSTask. On successful execution, task.result will contain an instance of AWSElasticLoadBalancingApplySecurityGroupsToLoadBalancerOutput. On failed execution, task.error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorAccessPointNotFound, AWSElasticLoadBalancingErrorInvalidConfigurationRequest, AWSElasticLoadBalancingErrorInvalidSecurityGroup.</Abstract></ReturnValue>
			<Anchor>//api/name/applySecurityGroupsToLoadBalancer:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/applySecurityGroupsToLoadBalancer:completionHandler:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Associates one or more security groups with your load balancer in a virtual private cloud (VPC). The specified security groups override the previously associated security groups.&lt;/p&gt;&lt;p&gt;For more information, see Security Groups for Load Balancers in a VPC in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingApplySecurityGroupsToLoadBalancerInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingApplySecurityGroupsToLoadBalancerOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)applySecurityGroupsToLoadBalancer:(AWSElasticLoadBalancingApplySecurityGroupsToLoadBalancerInput *)request completionHandler:(void ( ^ _Nullable ) ( AWSElasticLoadBalancingApplySecurityGroupsToLoadBalancerOutput *_Nullable response , NSError *_Nullable error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the ApplySecurityGroupsToLoadBalancer service method.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">The completion handler to call when the load request is complete.
                          response - A response object, or nil if the request failed.
                          error - An error object that indicates why the request failed, or nil if the request was successful. On failed execution, error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorAccessPointNotFound, AWSElasticLoadBalancingErrorInvalidConfigurationRequest, AWSElasticLoadBalancingErrorInvalidSecurityGroup.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/applySecurityGroupsToLoadBalancer:completionHandler:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/attachLoadBalancerToSubnets:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Adds one or more subnets to the set of configured subnets for the specified load balancer.&lt;/p&gt;&lt;p&gt;The load balancer evenly distributes requests across all registered subnets. For more information, see Add or Remove Subnets for Your Load Balancer in a VPC in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingAttachLoadBalancerToSubnetsInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingAttachLoadBalancerToSubnetsOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (AWSTask&lt;AWSElasticLoadBalancingAttachLoadBalancerToSubnetsOutput*&gt; *)attachLoadBalancerToSubnets:(AWSElasticLoadBalancingAttachLoadBalancerToSubnetsInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the AttachLoadBalancerToSubnets service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of AWSTask. On successful execution, task.result will contain an instance of AWSElasticLoadBalancingAttachLoadBalancerToSubnetsOutput. On failed execution, task.error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorAccessPointNotFound, AWSElasticLoadBalancingErrorInvalidConfigurationRequest, AWSElasticLoadBalancingErrorSubnetNotFound, AWSElasticLoadBalancingErrorInvalidSubnet.</Abstract></ReturnValue>
			<Anchor>//api/name/attachLoadBalancerToSubnets:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/attachLoadBalancerToSubnets:completionHandler:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Adds one or more subnets to the set of configured subnets for the specified load balancer.&lt;/p&gt;&lt;p&gt;The load balancer evenly distributes requests across all registered subnets. For more information, see Add or Remove Subnets for Your Load Balancer in a VPC in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingAttachLoadBalancerToSubnetsInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingAttachLoadBalancerToSubnetsOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)attachLoadBalancerToSubnets:(AWSElasticLoadBalancingAttachLoadBalancerToSubnetsInput *)request completionHandler:(void ( ^ _Nullable ) ( AWSElasticLoadBalancingAttachLoadBalancerToSubnetsOutput *_Nullable response , NSError *_Nullable error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the AttachLoadBalancerToSubnets service method.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">The completion handler to call when the load request is complete.
                          response - A response object, or nil if the request failed.
                          error - An error object that indicates why the request failed, or nil if the request was successful. On failed execution, error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorAccessPointNotFound, AWSElasticLoadBalancingErrorInvalidConfigurationRequest, AWSElasticLoadBalancingErrorSubnetNotFound, AWSElasticLoadBalancingErrorInvalidSubnet.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/attachLoadBalancerToSubnets:completionHandler:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/configureHealthCheck:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Specifies the health check settings to use when evaluating the health state of your EC2 instances.&lt;/p&gt;&lt;p&gt;For more information, see Configure Health Checks for Your Load Balancer in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingConfigureHealthCheckInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingConfigureHealthCheckOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (AWSTask&lt;AWSElasticLoadBalancingConfigureHealthCheckOutput*&gt; *)configureHealthCheck:(AWSElasticLoadBalancingConfigureHealthCheckInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the ConfigureHealthCheck service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of AWSTask. On successful execution, task.result will contain an instance of AWSElasticLoadBalancingConfigureHealthCheckOutput. On failed execution, task.error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorAccessPointNotFound.</Abstract></ReturnValue>
			<Anchor>//api/name/configureHealthCheck:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/configureHealthCheck:completionHandler:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Specifies the health check settings to use when evaluating the health state of your EC2 instances.&lt;/p&gt;&lt;p&gt;For more information, see Configure Health Checks for Your Load Balancer in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingConfigureHealthCheckInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingConfigureHealthCheckOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)configureHealthCheck:(AWSElasticLoadBalancingConfigureHealthCheckInput *)request completionHandler:(void ( ^ _Nullable ) ( AWSElasticLoadBalancingConfigureHealthCheckOutput *_Nullable response , NSError *_Nullable error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the ConfigureHealthCheck service method.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">The completion handler to call when the load request is complete.
                          response - A response object, or nil if the request failed.
                          error - An error object that indicates why the request failed, or nil if the request was successful. On failed execution, error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorAccessPointNotFound.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/configureHealthCheck:completionHandler:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/createAppCookieStickinessPolicy:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Generates a stickiness policy with sticky session lifetimes that follow that of an application-generated cookie. This policy can be associated only with HTTP/HTTPS listeners.&lt;/p&gt;&lt;p&gt;This policy is similar to the policy created by &lt;a&gt;CreateLBCookieStickinessPolicy&lt;/a&gt;, except that the lifetime of the special Elastic Load Balancing cookie, &lt;code&gt;AWSELB&lt;/code&gt;, follows the lifetime of the application-generated cookie specified in the policy configuration. The load balancer only inserts a new stickiness cookie when the application response includes a new application cookie.&lt;/p&gt;&lt;p&gt;If the application cookie is explicitly removed or expires, the session stops being sticky until a new application cookie is issued.&lt;/p&gt;&lt;p&gt;For more information, see Application-Controlled Session Stickiness in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingCreateAppCookieStickinessPolicyInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingCreateAppCookieStickinessPolicyOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (AWSTask&lt;AWSElasticLoadBalancingCreateAppCookieStickinessPolicyOutput*&gt; *)createAppCookieStickinessPolicy:(AWSElasticLoadBalancingCreateAppCookieStickinessPolicyInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the CreateAppCookieStickinessPolicy service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of AWSTask. On successful execution, task.result will contain an instance of AWSElasticLoadBalancingCreateAppCookieStickinessPolicyOutput. On failed execution, task.error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorAccessPointNotFound, AWSElasticLoadBalancingErrorDuplicatePolicyName, AWSElasticLoadBalancingErrorTooManyPolicies, AWSElasticLoadBalancingErrorInvalidConfigurationRequest.</Abstract></ReturnValue>
			<Anchor>//api/name/createAppCookieStickinessPolicy:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/createAppCookieStickinessPolicy:completionHandler:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Generates a stickiness policy with sticky session lifetimes that follow that of an application-generated cookie. This policy can be associated only with HTTP/HTTPS listeners.&lt;/p&gt;&lt;p&gt;This policy is similar to the policy created by &lt;a&gt;CreateLBCookieStickinessPolicy&lt;/a&gt;, except that the lifetime of the special Elastic Load Balancing cookie, &lt;code&gt;AWSELB&lt;/code&gt;, follows the lifetime of the application-generated cookie specified in the policy configuration. The load balancer only inserts a new stickiness cookie when the application response includes a new application cookie.&lt;/p&gt;&lt;p&gt;If the application cookie is explicitly removed or expires, the session stops being sticky until a new application cookie is issued.&lt;/p&gt;&lt;p&gt;For more information, see Application-Controlled Session Stickiness in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingCreateAppCookieStickinessPolicyInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingCreateAppCookieStickinessPolicyOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)createAppCookieStickinessPolicy:(AWSElasticLoadBalancingCreateAppCookieStickinessPolicyInput *)request completionHandler:(void ( ^ _Nullable ) ( AWSElasticLoadBalancingCreateAppCookieStickinessPolicyOutput *_Nullable response , NSError *_Nullable error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the CreateAppCookieStickinessPolicy service method.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">The completion handler to call when the load request is complete.
                          response - A response object, or nil if the request failed.
                          error - An error object that indicates why the request failed, or nil if the request was successful. On failed execution, error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorAccessPointNotFound, AWSElasticLoadBalancingErrorDuplicatePolicyName, AWSElasticLoadBalancingErrorTooManyPolicies, AWSElasticLoadBalancingErrorInvalidConfigurationRequest.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/createAppCookieStickinessPolicy:completionHandler:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/createLBCookieStickinessPolicy:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Generates a stickiness policy with sticky session lifetimes controlled by the lifetime of the browser (user-agent) or a specified expiration period. This policy can be associated only with HTTP/HTTPS listeners.&lt;/p&gt;&lt;p&gt;When a load balancer implements this policy, the load balancer uses a special cookie to track the instance for each request. When the load balancer receives a request, it first checks to see if this cookie is present in the request. If so, the load balancer sends the request to the application server specified in the cookie. If not, the load balancer sends the request to a server that is chosen based on the existing load-balancing algorithm.&lt;/p&gt;&lt;p&gt;A cookie is inserted into the response for binding subsequent requests from the same user to that server. The validity of the cookie is based on the cookie expiration time, which is specified in the policy configuration.&lt;/p&gt;&lt;p&gt;For more information, see Duration-Based Session Stickiness in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingCreateLBCookieStickinessPolicyInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingCreateLBCookieStickinessPolicyOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (AWSTask&lt;AWSElasticLoadBalancingCreateLBCookieStickinessPolicyOutput*&gt; *)createLBCookieStickinessPolicy:(AWSElasticLoadBalancingCreateLBCookieStickinessPolicyInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the CreateLBCookieStickinessPolicy service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of AWSTask. On successful execution, task.result will contain an instance of AWSElasticLoadBalancingCreateLBCookieStickinessPolicyOutput. On failed execution, task.error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorAccessPointNotFound, AWSElasticLoadBalancingErrorDuplicatePolicyName, AWSElasticLoadBalancingErrorTooManyPolicies, AWSElasticLoadBalancingErrorInvalidConfigurationRequest.</Abstract></ReturnValue>
			<Anchor>//api/name/createLBCookieStickinessPolicy:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/createLBCookieStickinessPolicy:completionHandler:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Generates a stickiness policy with sticky session lifetimes controlled by the lifetime of the browser (user-agent) or a specified expiration period. This policy can be associated only with HTTP/HTTPS listeners.&lt;/p&gt;&lt;p&gt;When a load balancer implements this policy, the load balancer uses a special cookie to track the instance for each request. When the load balancer receives a request, it first checks to see if this cookie is present in the request. If so, the load balancer sends the request to the application server specified in the cookie. If not, the load balancer sends the request to a server that is chosen based on the existing load-balancing algorithm.&lt;/p&gt;&lt;p&gt;A cookie is inserted into the response for binding subsequent requests from the same user to that server. The validity of the cookie is based on the cookie expiration time, which is specified in the policy configuration.&lt;/p&gt;&lt;p&gt;For more information, see Duration-Based Session Stickiness in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingCreateLBCookieStickinessPolicyInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingCreateLBCookieStickinessPolicyOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)createLBCookieStickinessPolicy:(AWSElasticLoadBalancingCreateLBCookieStickinessPolicyInput *)request completionHandler:(void ( ^ _Nullable ) ( AWSElasticLoadBalancingCreateLBCookieStickinessPolicyOutput *_Nullable response , NSError *_Nullable error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the CreateLBCookieStickinessPolicy service method.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">The completion handler to call when the load request is complete.
                          response - A response object, or nil if the request failed.
                          error - An error object that indicates why the request failed, or nil if the request was successful. On failed execution, error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorAccessPointNotFound, AWSElasticLoadBalancingErrorDuplicatePolicyName, AWSElasticLoadBalancingErrorTooManyPolicies, AWSElasticLoadBalancingErrorInvalidConfigurationRequest.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/createLBCookieStickinessPolicy:completionHandler:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/createLoadBalancer:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Creates a Classic load balancer.&lt;/p&gt;&lt;p&gt;You can add listeners, security groups, subnets, and tags when you create your load balancer, or you can add them later using &lt;a&gt;CreateLoadBalancerListeners&lt;/a&gt;, &lt;a&gt;ApplySecurityGroupsToLoadBalancer&lt;/a&gt;, &lt;a&gt;AttachLoadBalancerToSubnets&lt;/a&gt;, and &lt;a&gt;AddTags&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;To describe your current load balancers, see &lt;a&gt;DescribeLoadBalancers&lt;/a&gt;. When you are finished with a load balancer, you can delete it using &lt;a&gt;DeleteLoadBalancer&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;You can create up to 20 load balancers per region per account. You can request an increase for the number of load balancers for your account. For more information, see Limits for Your Classic Load Balancer in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingCreateAccessPointInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingCreateAccessPointOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (AWSTask&lt;AWSElasticLoadBalancingCreateAccessPointOutput*&gt; *)createLoadBalancer:(AWSElasticLoadBalancingCreateAccessPointInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the CreateLoadBalancer service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of AWSTask. On successful execution, task.result will contain an instance of AWSElasticLoadBalancingCreateAccessPointOutput. On failed execution, task.error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorDuplicateAccessPointName, AWSElasticLoadBalancingErrorTooManyAccessPoints, AWSElasticLoadBalancingErrorCertificateNotFound, AWSElasticLoadBalancingErrorInvalidConfigurationRequest, AWSElasticLoadBalancingErrorSubnetNotFound, AWSElasticLoadBalancingErrorInvalidSubnet, AWSElasticLoadBalancingErrorInvalidSecurityGroup, AWSElasticLoadBalancingErrorInvalidScheme, AWSElasticLoadBalancingErrorTooManyTags, AWSElasticLoadBalancingErrorDuplicateTagKeys, AWSElasticLoadBalancingErrorUnsupportedProtocol.</Abstract></ReturnValue>
			<Anchor>//api/name/createLoadBalancer:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/createLoadBalancer:completionHandler:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Creates a Classic load balancer.&lt;/p&gt;&lt;p&gt;You can add listeners, security groups, subnets, and tags when you create your load balancer, or you can add them later using &lt;a&gt;CreateLoadBalancerListeners&lt;/a&gt;, &lt;a&gt;ApplySecurityGroupsToLoadBalancer&lt;/a&gt;, &lt;a&gt;AttachLoadBalancerToSubnets&lt;/a&gt;, and &lt;a&gt;AddTags&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;To describe your current load balancers, see &lt;a&gt;DescribeLoadBalancers&lt;/a&gt;. When you are finished with a load balancer, you can delete it using &lt;a&gt;DeleteLoadBalancer&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;You can create up to 20 load balancers per region per account. You can request an increase for the number of load balancers for your account. For more information, see Limits for Your Classic Load Balancer in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingCreateAccessPointInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingCreateAccessPointOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)createLoadBalancer:(AWSElasticLoadBalancingCreateAccessPointInput *)request completionHandler:(void ( ^ _Nullable ) ( AWSElasticLoadBalancingCreateAccessPointOutput *_Nullable response , NSError *_Nullable error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the CreateLoadBalancer service method.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">The completion handler to call when the load request is complete.
                          response - A response object, or nil if the request failed.
                          error - An error object that indicates why the request failed, or nil if the request was successful. On failed execution, error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorDuplicateAccessPointName, AWSElasticLoadBalancingErrorTooManyAccessPoints, AWSElasticLoadBalancingErrorCertificateNotFound, AWSElasticLoadBalancingErrorInvalidConfigurationRequest, AWSElasticLoadBalancingErrorSubnetNotFound, AWSElasticLoadBalancingErrorInvalidSubnet, AWSElasticLoadBalancingErrorInvalidSecurityGroup, AWSElasticLoadBalancingErrorInvalidScheme, AWSElasticLoadBalancingErrorTooManyTags, AWSElasticLoadBalancingErrorDuplicateTagKeys, AWSElasticLoadBalancingErrorUnsupportedProtocol.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/createLoadBalancer:completionHandler:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/createLoadBalancerListeners:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Creates one or more listeners for the specified load balancer. If a listener with the specified port does not already exist, it is created; otherwise, the properties of the new listener must match the properties of the existing listener.&lt;/p&gt;&lt;p&gt;For more information, see Listeners for Your Classic Load Balancer in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingCreateLoadBalancerListenerInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingCreateLoadBalancerListenerOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (AWSTask&lt;AWSElasticLoadBalancingCreateLoadBalancerListenerOutput*&gt; *)createLoadBalancerListeners:(AWSElasticLoadBalancingCreateLoadBalancerListenerInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the CreateLoadBalancerListeners service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of AWSTask. On successful execution, task.result will contain an instance of AWSElasticLoadBalancingCreateLoadBalancerListenerOutput. On failed execution, task.error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorAccessPointNotFound, AWSElasticLoadBalancingErrorDuplicateListener, AWSElasticLoadBalancingErrorCertificateNotFound, AWSElasticLoadBalancingErrorInvalidConfigurationRequest, AWSElasticLoadBalancingErrorUnsupportedProtocol.</Abstract></ReturnValue>
			<Anchor>//api/name/createLoadBalancerListeners:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/createLoadBalancerListeners:completionHandler:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Creates one or more listeners for the specified load balancer. If a listener with the specified port does not already exist, it is created; otherwise, the properties of the new listener must match the properties of the existing listener.&lt;/p&gt;&lt;p&gt;For more information, see Listeners for Your Classic Load Balancer in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingCreateLoadBalancerListenerInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingCreateLoadBalancerListenerOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)createLoadBalancerListeners:(AWSElasticLoadBalancingCreateLoadBalancerListenerInput *)request completionHandler:(void ( ^ _Nullable ) ( AWSElasticLoadBalancingCreateLoadBalancerListenerOutput *_Nullable response , NSError *_Nullable error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the CreateLoadBalancerListeners service method.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">The completion handler to call when the load request is complete.
                          response - A response object, or nil if the request failed.
                          error - An error object that indicates why the request failed, or nil if the request was successful. On failed execution, error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorAccessPointNotFound, AWSElasticLoadBalancingErrorDuplicateListener, AWSElasticLoadBalancingErrorCertificateNotFound, AWSElasticLoadBalancingErrorInvalidConfigurationRequest, AWSElasticLoadBalancingErrorUnsupportedProtocol.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/createLoadBalancerListeners:completionHandler:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/createLoadBalancerPolicy:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Creates a policy with the specified attributes for the specified load balancer.&lt;/p&gt;&lt;p&gt;Policies are settings that are saved for your load balancer and that can be applied to the listener or the application server, depending on the policy type.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingCreateLoadBalancerPolicyInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingCreateLoadBalancerPolicyOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (AWSTask&lt;AWSElasticLoadBalancingCreateLoadBalancerPolicyOutput*&gt; *)createLoadBalancerPolicy:(AWSElasticLoadBalancingCreateLoadBalancerPolicyInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the CreateLoadBalancerPolicy service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of AWSTask. On successful execution, task.result will contain an instance of AWSElasticLoadBalancingCreateLoadBalancerPolicyOutput. On failed execution, task.error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorAccessPointNotFound, AWSElasticLoadBalancingErrorPolicyTypeNotFound, AWSElasticLoadBalancingErrorDuplicatePolicyName, AWSElasticLoadBalancingErrorTooManyPolicies, AWSElasticLoadBalancingErrorInvalidConfigurationRequest.</Abstract></ReturnValue>
			<Anchor>//api/name/createLoadBalancerPolicy:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/createLoadBalancerPolicy:completionHandler:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Creates a policy with the specified attributes for the specified load balancer.&lt;/p&gt;&lt;p&gt;Policies are settings that are saved for your load balancer and that can be applied to the listener or the application server, depending on the policy type.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingCreateLoadBalancerPolicyInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingCreateLoadBalancerPolicyOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)createLoadBalancerPolicy:(AWSElasticLoadBalancingCreateLoadBalancerPolicyInput *)request completionHandler:(void ( ^ _Nullable ) ( AWSElasticLoadBalancingCreateLoadBalancerPolicyOutput *_Nullable response , NSError *_Nullable error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the CreateLoadBalancerPolicy service method.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">The completion handler to call when the load request is complete.
                          response - A response object, or nil if the request failed.
                          error - An error object that indicates why the request failed, or nil if the request was successful. On failed execution, error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorAccessPointNotFound, AWSElasticLoadBalancingErrorPolicyTypeNotFound, AWSElasticLoadBalancingErrorDuplicatePolicyName, AWSElasticLoadBalancingErrorTooManyPolicies, AWSElasticLoadBalancingErrorInvalidConfigurationRequest.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/createLoadBalancerPolicy:completionHandler:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/deleteLoadBalancer:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Deletes the specified load balancer.&lt;/p&gt;&lt;p&gt;If you are attempting to recreate a load balancer, you must reconfigure all settings. The DNS name associated with a deleted load balancer are no longer usable. The name and associated DNS record of the deleted load balancer no longer exist and traffic sent to any of its IP addresses is no longer delivered to your instances.&lt;/p&gt;&lt;p&gt;If the load balancer does not exist or has already been deleted, the call to &lt;code&gt;DeleteLoadBalancer&lt;/code&gt; still succeeds.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingDeleteAccessPointInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingDeleteAccessPointOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (AWSTask&lt;AWSElasticLoadBalancingDeleteAccessPointOutput*&gt; *)deleteLoadBalancer:(AWSElasticLoadBalancingDeleteAccessPointInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the DeleteLoadBalancer service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of AWSTask. On successful execution, task.result will contain an instance of AWSElasticLoadBalancingDeleteAccessPointOutput.</Abstract></ReturnValue>
			<Anchor>//api/name/deleteLoadBalancer:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/deleteLoadBalancer:completionHandler:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Deletes the specified load balancer.&lt;/p&gt;&lt;p&gt;If you are attempting to recreate a load balancer, you must reconfigure all settings. The DNS name associated with a deleted load balancer are no longer usable. The name and associated DNS record of the deleted load balancer no longer exist and traffic sent to any of its IP addresses is no longer delivered to your instances.&lt;/p&gt;&lt;p&gt;If the load balancer does not exist or has already been deleted, the call to &lt;code&gt;DeleteLoadBalancer&lt;/code&gt; still succeeds.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingDeleteAccessPointInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingDeleteAccessPointOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)deleteLoadBalancer:(AWSElasticLoadBalancingDeleteAccessPointInput *)request completionHandler:(void ( ^ _Nullable ) ( AWSElasticLoadBalancingDeleteAccessPointOutput *_Nullable response , NSError *_Nullable error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the DeleteLoadBalancer service method.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">The completion handler to call when the load request is complete.
                          response - A response object, or nil if the request failed.
                          error - An error object that indicates why the request failed, or nil if the request was successful.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/deleteLoadBalancer:completionHandler:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/deleteLoadBalancerListeners:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Deletes the specified listeners from the specified load balancer.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingDeleteLoadBalancerListenerInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingDeleteLoadBalancerListenerOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (AWSTask&lt;AWSElasticLoadBalancingDeleteLoadBalancerListenerOutput*&gt; *)deleteLoadBalancerListeners:(AWSElasticLoadBalancingDeleteLoadBalancerListenerInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the DeleteLoadBalancerListeners service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of AWSTask. On successful execution, task.result will contain an instance of AWSElasticLoadBalancingDeleteLoadBalancerListenerOutput. On failed execution, task.error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorAccessPointNotFound.</Abstract></ReturnValue>
			<Anchor>//api/name/deleteLoadBalancerListeners:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/deleteLoadBalancerListeners:completionHandler:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Deletes the specified listeners from the specified load balancer.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingDeleteLoadBalancerListenerInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingDeleteLoadBalancerListenerOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)deleteLoadBalancerListeners:(AWSElasticLoadBalancingDeleteLoadBalancerListenerInput *)request completionHandler:(void ( ^ _Nullable ) ( AWSElasticLoadBalancingDeleteLoadBalancerListenerOutput *_Nullable response , NSError *_Nullable error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the DeleteLoadBalancerListeners service method.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">The completion handler to call when the load request is complete.
                          response - A response object, or nil if the request failed.
                          error - An error object that indicates why the request failed, or nil if the request was successful. On failed execution, error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorAccessPointNotFound.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/deleteLoadBalancerListeners:completionHandler:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/deleteLoadBalancerPolicy:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Deletes the specified policy from the specified load balancer. This policy must not be enabled for any listeners.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingDeleteLoadBalancerPolicyInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingDeleteLoadBalancerPolicyOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (AWSTask&lt;AWSElasticLoadBalancingDeleteLoadBalancerPolicyOutput*&gt; *)deleteLoadBalancerPolicy:(AWSElasticLoadBalancingDeleteLoadBalancerPolicyInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the DeleteLoadBalancerPolicy service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of AWSTask. On successful execution, task.result will contain an instance of AWSElasticLoadBalancingDeleteLoadBalancerPolicyOutput. On failed execution, task.error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorAccessPointNotFound, AWSElasticLoadBalancingErrorInvalidConfigurationRequest.</Abstract></ReturnValue>
			<Anchor>//api/name/deleteLoadBalancerPolicy:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/deleteLoadBalancerPolicy:completionHandler:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Deletes the specified policy from the specified load balancer. This policy must not be enabled for any listeners.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingDeleteLoadBalancerPolicyInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingDeleteLoadBalancerPolicyOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)deleteLoadBalancerPolicy:(AWSElasticLoadBalancingDeleteLoadBalancerPolicyInput *)request completionHandler:(void ( ^ _Nullable ) ( AWSElasticLoadBalancingDeleteLoadBalancerPolicyOutput *_Nullable response , NSError *_Nullable error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the DeleteLoadBalancerPolicy service method.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">The completion handler to call when the load request is complete.
                          response - A response object, or nil if the request failed.
                          error - An error object that indicates why the request failed, or nil if the request was successful. On failed execution, error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorAccessPointNotFound, AWSElasticLoadBalancingErrorInvalidConfigurationRequest.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/deleteLoadBalancerPolicy:completionHandler:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/deregisterInstancesFromLoadBalancer:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Deregisters the specified instances from the specified load balancer. After the instance is deregistered, it no longer receives traffic from the load balancer.&lt;/p&gt;&lt;p&gt;You can use &lt;a&gt;DescribeLoadBalancers&lt;/a&gt; to verify that the instance is deregistered from the load balancer.&lt;/p&gt;&lt;p&gt;For more information, see Register or De-Register EC2 Instances in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingDeregisterEndPointsInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingDeregisterEndPointsOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (AWSTask&lt;AWSElasticLoadBalancingDeregisterEndPointsOutput*&gt; *)deregisterInstancesFromLoadBalancer:(AWSElasticLoadBalancingDeregisterEndPointsInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the DeregisterInstancesFromLoadBalancer service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of AWSTask. On successful execution, task.result will contain an instance of AWSElasticLoadBalancingDeregisterEndPointsOutput. On failed execution, task.error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorAccessPointNotFound, AWSElasticLoadBalancingErrorInvalidEndPoint.</Abstract></ReturnValue>
			<Anchor>//api/name/deregisterInstancesFromLoadBalancer:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/deregisterInstancesFromLoadBalancer:completionHandler:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Deregisters the specified instances from the specified load balancer. After the instance is deregistered, it no longer receives traffic from the load balancer.&lt;/p&gt;&lt;p&gt;You can use &lt;a&gt;DescribeLoadBalancers&lt;/a&gt; to verify that the instance is deregistered from the load balancer.&lt;/p&gt;&lt;p&gt;For more information, see Register or De-Register EC2 Instances in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingDeregisterEndPointsInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingDeregisterEndPointsOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)deregisterInstancesFromLoadBalancer:(AWSElasticLoadBalancingDeregisterEndPointsInput *)request completionHandler:(void ( ^ _Nullable ) ( AWSElasticLoadBalancingDeregisterEndPointsOutput *_Nullable response , NSError *_Nullable error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the DeregisterInstancesFromLoadBalancer service method.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">The completion handler to call when the load request is complete.
                          response - A response object, or nil if the request failed.
                          error - An error object that indicates why the request failed, or nil if the request was successful. On failed execution, error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorAccessPointNotFound, AWSElasticLoadBalancingErrorInvalidEndPoint.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/deregisterInstancesFromLoadBalancer:completionHandler:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/describeInstanceHealth:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Describes the state of the specified instances with respect to the specified load balancer. If no instances are specified, the call describes the state of all instances that are currently registered with the load balancer. If instances are specified, their state is returned even if they are no longer registered with the load balancer. The state of terminated instances is not returned.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingDescribeEndPointStateInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingDescribeEndPointStateOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (AWSTask&lt;AWSElasticLoadBalancingDescribeEndPointStateOutput*&gt; *)describeInstanceHealth:(AWSElasticLoadBalancingDescribeEndPointStateInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the DescribeInstanceHealth service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of AWSTask. On successful execution, task.result will contain an instance of AWSElasticLoadBalancingDescribeEndPointStateOutput. On failed execution, task.error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorAccessPointNotFound, AWSElasticLoadBalancingErrorInvalidEndPoint.</Abstract></ReturnValue>
			<Anchor>//api/name/describeInstanceHealth:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/describeInstanceHealth:completionHandler:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Describes the state of the specified instances with respect to the specified load balancer. If no instances are specified, the call describes the state of all instances that are currently registered with the load balancer. If instances are specified, their state is returned even if they are no longer registered with the load balancer. The state of terminated instances is not returned.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingDescribeEndPointStateInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingDescribeEndPointStateOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)describeInstanceHealth:(AWSElasticLoadBalancingDescribeEndPointStateInput *)request completionHandler:(void ( ^ _Nullable ) ( AWSElasticLoadBalancingDescribeEndPointStateOutput *_Nullable response , NSError *_Nullable error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the DescribeInstanceHealth service method.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">The completion handler to call when the load request is complete.
                          response - A response object, or nil if the request failed.
                          error - An error object that indicates why the request failed, or nil if the request was successful. On failed execution, error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorAccessPointNotFound, AWSElasticLoadBalancingErrorInvalidEndPoint.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/describeInstanceHealth:completionHandler:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/describeLoadBalancerAttributes:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Describes the attributes for the specified load balancer.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingDescribeLoadBalancerAttributesInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingDescribeLoadBalancerAttributesOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (AWSTask&lt;AWSElasticLoadBalancingDescribeLoadBalancerAttributesOutput*&gt; *)describeLoadBalancerAttributes:(AWSElasticLoadBalancingDescribeLoadBalancerAttributesInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the DescribeLoadBalancerAttributes service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of AWSTask. On successful execution, task.result will contain an instance of AWSElasticLoadBalancingDescribeLoadBalancerAttributesOutput. On failed execution, task.error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorAccessPointNotFound, AWSElasticLoadBalancingErrorLoadBalancerAttributeNotFound.</Abstract></ReturnValue>
			<Anchor>//api/name/describeLoadBalancerAttributes:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/describeLoadBalancerAttributes:completionHandler:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Describes the attributes for the specified load balancer.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingDescribeLoadBalancerAttributesInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingDescribeLoadBalancerAttributesOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)describeLoadBalancerAttributes:(AWSElasticLoadBalancingDescribeLoadBalancerAttributesInput *)request completionHandler:(void ( ^ _Nullable ) ( AWSElasticLoadBalancingDescribeLoadBalancerAttributesOutput *_Nullable response , NSError *_Nullable error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the DescribeLoadBalancerAttributes service method.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">The completion handler to call when the load request is complete.
                          response - A response object, or nil if the request failed.
                          error - An error object that indicates why the request failed, or nil if the request was successful. On failed execution, error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorAccessPointNotFound, AWSElasticLoadBalancingErrorLoadBalancerAttributeNotFound.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/describeLoadBalancerAttributes:completionHandler:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/describeLoadBalancerPolicies:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Describes the specified policies.&lt;/p&gt;&lt;p&gt;If you specify a load balancer name, the action returns the descriptions of all policies created for the load balancer. If you specify a policy name associated with your load balancer, the action returns the description of that policy. If you don&apos;t specify a load balancer name, the action returns descriptions of the specified sample policies, or descriptions of all sample policies. The names of the sample policies have the &lt;code&gt;ELBSample-&lt;/code&gt; prefix.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingDescribeLoadBalancerPoliciesInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingDescribeLoadBalancerPoliciesOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (AWSTask&lt;AWSElasticLoadBalancingDescribeLoadBalancerPoliciesOutput*&gt; *)describeLoadBalancerPolicies:(AWSElasticLoadBalancingDescribeLoadBalancerPoliciesInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the DescribeLoadBalancerPolicies service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of AWSTask. On successful execution, task.result will contain an instance of AWSElasticLoadBalancingDescribeLoadBalancerPoliciesOutput. On failed execution, task.error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorAccessPointNotFound, AWSElasticLoadBalancingErrorPolicyNotFound.</Abstract></ReturnValue>
			<Anchor>//api/name/describeLoadBalancerPolicies:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/describeLoadBalancerPolicies:completionHandler:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Describes the specified policies.&lt;/p&gt;&lt;p&gt;If you specify a load balancer name, the action returns the descriptions of all policies created for the load balancer. If you specify a policy name associated with your load balancer, the action returns the description of that policy. If you don&apos;t specify a load balancer name, the action returns descriptions of the specified sample policies, or descriptions of all sample policies. The names of the sample policies have the &lt;code&gt;ELBSample-&lt;/code&gt; prefix.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingDescribeLoadBalancerPoliciesInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingDescribeLoadBalancerPoliciesOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)describeLoadBalancerPolicies:(AWSElasticLoadBalancingDescribeLoadBalancerPoliciesInput *)request completionHandler:(void ( ^ _Nullable ) ( AWSElasticLoadBalancingDescribeLoadBalancerPoliciesOutput *_Nullable response , NSError *_Nullable error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the DescribeLoadBalancerPolicies service method.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">The completion handler to call when the load request is complete.
                          response - A response object, or nil if the request failed.
                          error - An error object that indicates why the request failed, or nil if the request was successful. On failed execution, error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorAccessPointNotFound, AWSElasticLoadBalancingErrorPolicyNotFound.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/describeLoadBalancerPolicies:completionHandler:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/describeLoadBalancerPolicyTypes:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Describes the specified load balancer policy types or all load balancer policy types.&lt;/p&gt;&lt;p&gt;The description of each type indicates how it can be used. For example, some policies can be used only with layer 7 listeners, some policies can be used only with layer 4 listeners, and some policies can be used only with your EC2 instances.&lt;/p&gt;&lt;p&gt;You can use &lt;a&gt;CreateLoadBalancerPolicy&lt;/a&gt; to create a policy configuration for any of these policy types. Then, depending on the policy type, use either &lt;a&gt;SetLoadBalancerPoliciesOfListener&lt;/a&gt; or &lt;a&gt;SetLoadBalancerPoliciesForBackendServer&lt;/a&gt; to set the policy.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingDescribeLoadBalancerPolicyTypesInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingDescribeLoadBalancerPolicyTypesOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (AWSTask&lt;AWSElasticLoadBalancingDescribeLoadBalancerPolicyTypesOutput*&gt; *)describeLoadBalancerPolicyTypes:(AWSElasticLoadBalancingDescribeLoadBalancerPolicyTypesInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the DescribeLoadBalancerPolicyTypes service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of AWSTask. On successful execution, task.result will contain an instance of AWSElasticLoadBalancingDescribeLoadBalancerPolicyTypesOutput. On failed execution, task.error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorPolicyTypeNotFound.</Abstract></ReturnValue>
			<Anchor>//api/name/describeLoadBalancerPolicyTypes:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/describeLoadBalancerPolicyTypes:completionHandler:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Describes the specified load balancer policy types or all load balancer policy types.&lt;/p&gt;&lt;p&gt;The description of each type indicates how it can be used. For example, some policies can be used only with layer 7 listeners, some policies can be used only with layer 4 listeners, and some policies can be used only with your EC2 instances.&lt;/p&gt;&lt;p&gt;You can use &lt;a&gt;CreateLoadBalancerPolicy&lt;/a&gt; to create a policy configuration for any of these policy types. Then, depending on the policy type, use either &lt;a&gt;SetLoadBalancerPoliciesOfListener&lt;/a&gt; or &lt;a&gt;SetLoadBalancerPoliciesForBackendServer&lt;/a&gt; to set the policy.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingDescribeLoadBalancerPolicyTypesInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingDescribeLoadBalancerPolicyTypesOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)describeLoadBalancerPolicyTypes:(AWSElasticLoadBalancingDescribeLoadBalancerPolicyTypesInput *)request completionHandler:(void ( ^ _Nullable ) ( AWSElasticLoadBalancingDescribeLoadBalancerPolicyTypesOutput *_Nullable response , NSError *_Nullable error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the DescribeLoadBalancerPolicyTypes service method.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">The completion handler to call when the load request is complete.
                          response - A response object, or nil if the request failed.
                          error - An error object that indicates why the request failed, or nil if the request was successful. On failed execution, error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorPolicyTypeNotFound.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/describeLoadBalancerPolicyTypes:completionHandler:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/describeLoadBalancers:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Describes the specified the load balancers. If no load balancers are specified, the call describes all of your load balancers.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingDescribeAccessPointsInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingDescribeAccessPointsOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (AWSTask&lt;AWSElasticLoadBalancingDescribeAccessPointsOutput*&gt; *)describeLoadBalancers:(AWSElasticLoadBalancingDescribeAccessPointsInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the DescribeLoadBalancers service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of AWSTask. On successful execution, task.result will contain an instance of AWSElasticLoadBalancingDescribeAccessPointsOutput. On failed execution, task.error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorAccessPointNotFound, AWSElasticLoadBalancingErrorDependencyThrottle.</Abstract></ReturnValue>
			<Anchor>//api/name/describeLoadBalancers:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/describeLoadBalancers:completionHandler:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Describes the specified the load balancers. If no load balancers are specified, the call describes all of your load balancers.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingDescribeAccessPointsInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingDescribeAccessPointsOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)describeLoadBalancers:(AWSElasticLoadBalancingDescribeAccessPointsInput *)request completionHandler:(void ( ^ _Nullable ) ( AWSElasticLoadBalancingDescribeAccessPointsOutput *_Nullable response , NSError *_Nullable error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the DescribeLoadBalancers service method.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">The completion handler to call when the load request is complete.
                          response - A response object, or nil if the request failed.
                          error - An error object that indicates why the request failed, or nil if the request was successful. On failed execution, error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorAccessPointNotFound, AWSElasticLoadBalancingErrorDependencyThrottle.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/describeLoadBalancers:completionHandler:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/describeTags:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Describes the tags associated with the specified load balancers.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingDescribeTagsInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingDescribeTagsOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (AWSTask&lt;AWSElasticLoadBalancingDescribeTagsOutput*&gt; *)describeTags:(AWSElasticLoadBalancingDescribeTagsInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the DescribeTags service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of AWSTask. On successful execution, task.result will contain an instance of AWSElasticLoadBalancingDescribeTagsOutput. On failed execution, task.error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorAccessPointNotFound.</Abstract></ReturnValue>
			<Anchor>//api/name/describeTags:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/describeTags:completionHandler:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Describes the tags associated with the specified load balancers.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingDescribeTagsInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingDescribeTagsOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)describeTags:(AWSElasticLoadBalancingDescribeTagsInput *)request completionHandler:(void ( ^ _Nullable ) ( AWSElasticLoadBalancingDescribeTagsOutput *_Nullable response , NSError *_Nullable error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the DescribeTags service method.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">The completion handler to call when the load request is complete.
                          response - A response object, or nil if the request failed.
                          error - An error object that indicates why the request failed, or nil if the request was successful. On failed execution, error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorAccessPointNotFound.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/describeTags:completionHandler:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/detachLoadBalancerFromSubnets:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Removes the specified subnets from the set of configured subnets for the load balancer.&lt;/p&gt;&lt;p&gt;After a subnet is removed, all EC2 instances registered with the load balancer in the removed subnet go into the &lt;code&gt;OutOfService&lt;/code&gt; state. Then, the load balancer balances the traffic among the remaining routable subnets.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingDetachLoadBalancerFromSubnetsInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingDetachLoadBalancerFromSubnetsOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (AWSTask&lt;AWSElasticLoadBalancingDetachLoadBalancerFromSubnetsOutput*&gt; *)detachLoadBalancerFromSubnets:(AWSElasticLoadBalancingDetachLoadBalancerFromSubnetsInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the DetachLoadBalancerFromSubnets service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of AWSTask. On successful execution, task.result will contain an instance of AWSElasticLoadBalancingDetachLoadBalancerFromSubnetsOutput. On failed execution, task.error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorAccessPointNotFound, AWSElasticLoadBalancingErrorInvalidConfigurationRequest.</Abstract></ReturnValue>
			<Anchor>//api/name/detachLoadBalancerFromSubnets:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/detachLoadBalancerFromSubnets:completionHandler:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Removes the specified subnets from the set of configured subnets for the load balancer.&lt;/p&gt;&lt;p&gt;After a subnet is removed, all EC2 instances registered with the load balancer in the removed subnet go into the &lt;code&gt;OutOfService&lt;/code&gt; state. Then, the load balancer balances the traffic among the remaining routable subnets.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingDetachLoadBalancerFromSubnetsInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingDetachLoadBalancerFromSubnetsOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)detachLoadBalancerFromSubnets:(AWSElasticLoadBalancingDetachLoadBalancerFromSubnetsInput *)request completionHandler:(void ( ^ _Nullable ) ( AWSElasticLoadBalancingDetachLoadBalancerFromSubnetsOutput *_Nullable response , NSError *_Nullable error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the DetachLoadBalancerFromSubnets service method.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">The completion handler to call when the load request is complete.
                          response - A response object, or nil if the request failed.
                          error - An error object that indicates why the request failed, or nil if the request was successful. On failed execution, error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorAccessPointNotFound, AWSElasticLoadBalancingErrorInvalidConfigurationRequest.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/detachLoadBalancerFromSubnets:completionHandler:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/disableAvailabilityZonesForLoadBalancer:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Removes the specified Availability Zones from the set of Availability Zones for the specified load balancer.&lt;/p&gt;&lt;p&gt;There must be at least one Availability Zone registered with a load balancer at all times. After an Availability Zone is removed, all instances registered with the load balancer that are in the removed Availability Zone go into the &lt;code&gt;OutOfService&lt;/code&gt; state. Then, the load balancer attempts to equally balance the traffic among its remaining Availability Zones.&lt;/p&gt;&lt;p&gt;For more information, see Add or Remove Availability Zones in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingRemoveAvailabilityZonesInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingRemoveAvailabilityZonesOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (AWSTask&lt;AWSElasticLoadBalancingRemoveAvailabilityZonesOutput*&gt; *)disableAvailabilityZonesForLoadBalancer:(AWSElasticLoadBalancingRemoveAvailabilityZonesInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the DisableAvailabilityZonesForLoadBalancer service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of AWSTask. On successful execution, task.result will contain an instance of AWSElasticLoadBalancingRemoveAvailabilityZonesOutput. On failed execution, task.error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorAccessPointNotFound, AWSElasticLoadBalancingErrorInvalidConfigurationRequest.</Abstract></ReturnValue>
			<Anchor>//api/name/disableAvailabilityZonesForLoadBalancer:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/disableAvailabilityZonesForLoadBalancer:completionHandler:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Removes the specified Availability Zones from the set of Availability Zones for the specified load balancer.&lt;/p&gt;&lt;p&gt;There must be at least one Availability Zone registered with a load balancer at all times. After an Availability Zone is removed, all instances registered with the load balancer that are in the removed Availability Zone go into the &lt;code&gt;OutOfService&lt;/code&gt; state. Then, the load balancer attempts to equally balance the traffic among its remaining Availability Zones.&lt;/p&gt;&lt;p&gt;For more information, see Add or Remove Availability Zones in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingRemoveAvailabilityZonesInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingRemoveAvailabilityZonesOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)disableAvailabilityZonesForLoadBalancer:(AWSElasticLoadBalancingRemoveAvailabilityZonesInput *)request completionHandler:(void ( ^ _Nullable ) ( AWSElasticLoadBalancingRemoveAvailabilityZonesOutput *_Nullable response , NSError *_Nullable error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the DisableAvailabilityZonesForLoadBalancer service method.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">The completion handler to call when the load request is complete.
                          response - A response object, or nil if the request failed.
                          error - An error object that indicates why the request failed, or nil if the request was successful. On failed execution, error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorAccessPointNotFound, AWSElasticLoadBalancingErrorInvalidConfigurationRequest.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/disableAvailabilityZonesForLoadBalancer:completionHandler:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/enableAvailabilityZonesForLoadBalancer:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Adds the specified Availability Zones to the set of Availability Zones for the specified load balancer.&lt;/p&gt;&lt;p&gt;The load balancer evenly distributes requests across all its registered Availability Zones that contain instances.&lt;/p&gt;&lt;p&gt;For more information, see Add or Remove Availability Zones in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingAddAvailabilityZonesInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingAddAvailabilityZonesOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (AWSTask&lt;AWSElasticLoadBalancingAddAvailabilityZonesOutput*&gt; *)enableAvailabilityZonesForLoadBalancer:(AWSElasticLoadBalancingAddAvailabilityZonesInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the EnableAvailabilityZonesForLoadBalancer service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of AWSTask. On successful execution, task.result will contain an instance of AWSElasticLoadBalancingAddAvailabilityZonesOutput. On failed execution, task.error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorAccessPointNotFound.</Abstract></ReturnValue>
			<Anchor>//api/name/enableAvailabilityZonesForLoadBalancer:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/enableAvailabilityZonesForLoadBalancer:completionHandler:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Adds the specified Availability Zones to the set of Availability Zones for the specified load balancer.&lt;/p&gt;&lt;p&gt;The load balancer evenly distributes requests across all its registered Availability Zones that contain instances.&lt;/p&gt;&lt;p&gt;For more information, see Add or Remove Availability Zones in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingAddAvailabilityZonesInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingAddAvailabilityZonesOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)enableAvailabilityZonesForLoadBalancer:(AWSElasticLoadBalancingAddAvailabilityZonesInput *)request completionHandler:(void ( ^ _Nullable ) ( AWSElasticLoadBalancingAddAvailabilityZonesOutput *_Nullable response , NSError *_Nullable error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the EnableAvailabilityZonesForLoadBalancer service method.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">The completion handler to call when the load request is complete.
                          response - A response object, or nil if the request failed.
                          error - An error object that indicates why the request failed, or nil if the request was successful. On failed execution, error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorAccessPointNotFound.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/enableAvailabilityZonesForLoadBalancer:completionHandler:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/modifyLoadBalancerAttributes:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Modifies the attributes of the specified load balancer.&lt;/p&gt;&lt;p&gt;You can modify the load balancer attributes, such as &lt;code&gt;AccessLogs&lt;/code&gt;, &lt;code&gt;ConnectionDraining&lt;/code&gt;, and &lt;code&gt;CrossZoneLoadBalancing&lt;/code&gt; by either enabling or disabling them. Or, you can modify the load balancer attribute &lt;code&gt;ConnectionSettings&lt;/code&gt; by specifying an idle connection timeout value for your load balancer.&lt;/p&gt;&lt;p&gt;For more information, see the following in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Idle Connection Timeout&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingModifyLoadBalancerAttributesInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingModifyLoadBalancerAttributesOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (AWSTask&lt;AWSElasticLoadBalancingModifyLoadBalancerAttributesOutput*&gt; *)modifyLoadBalancerAttributes:(AWSElasticLoadBalancingModifyLoadBalancerAttributesInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the ModifyLoadBalancerAttributes service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of AWSTask. On successful execution, task.result will contain an instance of AWSElasticLoadBalancingModifyLoadBalancerAttributesOutput. On failed execution, task.error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorAccessPointNotFound, AWSElasticLoadBalancingErrorLoadBalancerAttributeNotFound, AWSElasticLoadBalancingErrorInvalidConfigurationRequest.</Abstract></ReturnValue>
			<Anchor>//api/name/modifyLoadBalancerAttributes:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/modifyLoadBalancerAttributes:completionHandler:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Modifies the attributes of the specified load balancer.&lt;/p&gt;&lt;p&gt;You can modify the load balancer attributes, such as &lt;code&gt;AccessLogs&lt;/code&gt;, &lt;code&gt;ConnectionDraining&lt;/code&gt;, and &lt;code&gt;CrossZoneLoadBalancing&lt;/code&gt; by either enabling or disabling them. Or, you can modify the load balancer attribute &lt;code&gt;ConnectionSettings&lt;/code&gt; by specifying an idle connection timeout value for your load balancer.&lt;/p&gt;&lt;p&gt;For more information, see the following in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Idle Connection Timeout&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingModifyLoadBalancerAttributesInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingModifyLoadBalancerAttributesOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)modifyLoadBalancerAttributes:(AWSElasticLoadBalancingModifyLoadBalancerAttributesInput *)request completionHandler:(void ( ^ _Nullable ) ( AWSElasticLoadBalancingModifyLoadBalancerAttributesOutput *_Nullable response , NSError *_Nullable error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the ModifyLoadBalancerAttributes service method.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">The completion handler to call when the load request is complete.
                          response - A response object, or nil if the request failed.
                          error - An error object that indicates why the request failed, or nil if the request was successful. On failed execution, error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorAccessPointNotFound, AWSElasticLoadBalancingErrorLoadBalancerAttributeNotFound, AWSElasticLoadBalancingErrorInvalidConfigurationRequest.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/modifyLoadBalancerAttributes:completionHandler:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/registerInstancesWithLoadBalancer:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Adds the specified instances to the specified load balancer.&lt;/p&gt;&lt;p&gt;The instance must be a running instance in the same network as the load balancer (EC2-Classic or the same VPC). If you have EC2-Classic instances and a load balancer in a VPC with ClassicLink enabled, you can link the EC2-Classic instances to that VPC and then register the linked EC2-Classic instances with the load balancer in the VPC.&lt;/p&gt;&lt;p&gt;Note that &lt;code&gt;RegisterInstanceWithLoadBalancer&lt;/code&gt; completes when the request has been registered. Instance registration takes a little time to complete. To check the state of the registered instances, use &lt;a&gt;DescribeLoadBalancers&lt;/a&gt; or &lt;a&gt;DescribeInstanceHealth&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;After the instance is registered, it starts receiving traffic and requests from the load balancer. Any instance that is not in one of the Availability Zones registered for the load balancer is moved to the &lt;code&gt;OutOfService&lt;/code&gt; state. If an Availability Zone is added to the load balancer later, any instances registered with the load balancer move to the &lt;code&gt;InService&lt;/code&gt; state.&lt;/p&gt;&lt;p&gt;To deregister instances from a load balancer, use &lt;a&gt;DeregisterInstancesFromLoadBalancer&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;For more information, see Register or De-Register EC2 Instances in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingRegisterEndPointsInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingRegisterEndPointsOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (AWSTask&lt;AWSElasticLoadBalancingRegisterEndPointsOutput*&gt; *)registerInstancesWithLoadBalancer:(AWSElasticLoadBalancingRegisterEndPointsInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the RegisterInstancesWithLoadBalancer service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of AWSTask. On successful execution, task.result will contain an instance of AWSElasticLoadBalancingRegisterEndPointsOutput. On failed execution, task.error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorAccessPointNotFound, AWSElasticLoadBalancingErrorInvalidEndPoint.</Abstract></ReturnValue>
			<Anchor>//api/name/registerInstancesWithLoadBalancer:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/registerInstancesWithLoadBalancer:completionHandler:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Adds the specified instances to the specified load balancer.&lt;/p&gt;&lt;p&gt;The instance must be a running instance in the same network as the load balancer (EC2-Classic or the same VPC). If you have EC2-Classic instances and a load balancer in a VPC with ClassicLink enabled, you can link the EC2-Classic instances to that VPC and then register the linked EC2-Classic instances with the load balancer in the VPC.&lt;/p&gt;&lt;p&gt;Note that &lt;code&gt;RegisterInstanceWithLoadBalancer&lt;/code&gt; completes when the request has been registered. Instance registration takes a little time to complete. To check the state of the registered instances, use &lt;a&gt;DescribeLoadBalancers&lt;/a&gt; or &lt;a&gt;DescribeInstanceHealth&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;After the instance is registered, it starts receiving traffic and requests from the load balancer. Any instance that is not in one of the Availability Zones registered for the load balancer is moved to the &lt;code&gt;OutOfService&lt;/code&gt; state. If an Availability Zone is added to the load balancer later, any instances registered with the load balancer move to the &lt;code&gt;InService&lt;/code&gt; state.&lt;/p&gt;&lt;p&gt;To deregister instances from a load balancer, use &lt;a&gt;DeregisterInstancesFromLoadBalancer&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;For more information, see Register or De-Register EC2 Instances in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingRegisterEndPointsInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingRegisterEndPointsOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)registerInstancesWithLoadBalancer:(AWSElasticLoadBalancingRegisterEndPointsInput *)request completionHandler:(void ( ^ _Nullable ) ( AWSElasticLoadBalancingRegisterEndPointsOutput *_Nullable response , NSError *_Nullable error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the RegisterInstancesWithLoadBalancer service method.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">The completion handler to call when the load request is complete.
                          response - A response object, or nil if the request failed.
                          error - An error object that indicates why the request failed, or nil if the request was successful. On failed execution, error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorAccessPointNotFound, AWSElasticLoadBalancingErrorInvalidEndPoint.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/registerInstancesWithLoadBalancer:completionHandler:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/removeTags:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Removes one or more tags from the specified load balancer.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingRemoveTagsInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingRemoveTagsOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (AWSTask&lt;AWSElasticLoadBalancingRemoveTagsOutput*&gt; *)removeTags:(AWSElasticLoadBalancingRemoveTagsInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the RemoveTags service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of AWSTask. On successful execution, task.result will contain an instance of AWSElasticLoadBalancingRemoveTagsOutput. On failed execution, task.error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorAccessPointNotFound.</Abstract></ReturnValue>
			<Anchor>//api/name/removeTags:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/removeTags:completionHandler:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Removes one or more tags from the specified load balancer.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingRemoveTagsInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingRemoveTagsOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)removeTags:(AWSElasticLoadBalancingRemoveTagsInput *)request completionHandler:(void ( ^ _Nullable ) ( AWSElasticLoadBalancingRemoveTagsOutput *_Nullable response , NSError *_Nullable error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the RemoveTags service method.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">The completion handler to call when the load request is complete.
                          response - A response object, or nil if the request failed.
                          error - An error object that indicates why the request failed, or nil if the request was successful. On failed execution, error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorAccessPointNotFound.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/removeTags:completionHandler:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/setLoadBalancerListenerSSLCertificate:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Sets the certificate that terminates the specified listener&apos;s SSL connections. The specified certificate replaces any prior certificate that was used on the same load balancer and port.&lt;/p&gt;&lt;p&gt;For more information about updating your SSL certificate, see Replace the SSL Certificate for Your Load Balancer in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingSetLoadBalancerListenerSSLCertificateInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingSetLoadBalancerListenerSSLCertificateOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (AWSTask&lt;AWSElasticLoadBalancingSetLoadBalancerListenerSSLCertificateOutput*&gt; *)setLoadBalancerListenerSSLCertificate:(AWSElasticLoadBalancingSetLoadBalancerListenerSSLCertificateInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the SetLoadBalancerListenerSSLCertificate service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of AWSTask. On successful execution, task.result will contain an instance of AWSElasticLoadBalancingSetLoadBalancerListenerSSLCertificateOutput. On failed execution, task.error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorCertificateNotFound, AWSElasticLoadBalancingErrorAccessPointNotFound, AWSElasticLoadBalancingErrorListenerNotFound, AWSElasticLoadBalancingErrorInvalidConfigurationRequest, AWSElasticLoadBalancingErrorUnsupportedProtocol.</Abstract></ReturnValue>
			<Anchor>//api/name/setLoadBalancerListenerSSLCertificate:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/setLoadBalancerListenerSSLCertificate:completionHandler:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Sets the certificate that terminates the specified listener&apos;s SSL connections. The specified certificate replaces any prior certificate that was used on the same load balancer and port.&lt;/p&gt;&lt;p&gt;For more information about updating your SSL certificate, see Replace the SSL Certificate for Your Load Balancer in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingSetLoadBalancerListenerSSLCertificateInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingSetLoadBalancerListenerSSLCertificateOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)setLoadBalancerListenerSSLCertificate:(AWSElasticLoadBalancingSetLoadBalancerListenerSSLCertificateInput *)request completionHandler:(void ( ^ _Nullable ) ( AWSElasticLoadBalancingSetLoadBalancerListenerSSLCertificateOutput *_Nullable response , NSError *_Nullable error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the SetLoadBalancerListenerSSLCertificate service method.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">The completion handler to call when the load request is complete.
                          response - A response object, or nil if the request failed.
                          error - An error object that indicates why the request failed, or nil if the request was successful. On failed execution, error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorCertificateNotFound, AWSElasticLoadBalancingErrorAccessPointNotFound, AWSElasticLoadBalancingErrorListenerNotFound, AWSElasticLoadBalancingErrorInvalidConfigurationRequest, AWSElasticLoadBalancingErrorUnsupportedProtocol.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setLoadBalancerListenerSSLCertificate:completionHandler:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/setLoadBalancerPoliciesForBackendServer:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Replaces the set of policies associated with the specified port on which the EC2 instance is listening with a new set of policies. At this time, only the back-end server authentication policy type can be applied to the instance ports; this policy type is composed of multiple public key policies.&lt;/p&gt;&lt;p&gt;Each time you use &lt;code&gt;SetLoadBalancerPoliciesForBackendServer&lt;/code&gt; to enable the policies, use the &lt;code&gt;PolicyNames&lt;/code&gt; parameter to list the policies that you want to enable.&lt;/p&gt;&lt;p&gt;You can use &lt;a&gt;DescribeLoadBalancers&lt;/a&gt; or &lt;a&gt;DescribeLoadBalancerPolicies&lt;/a&gt; to verify that the policy is associated with the EC2 instance.&lt;/p&gt;&lt;p&gt;For more information about enabling back-end instance authentication, see Configure Proxy Protocol Support in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingSetLoadBalancerPoliciesForBackendServerInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingSetLoadBalancerPoliciesForBackendServerOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (AWSTask&lt;AWSElasticLoadBalancingSetLoadBalancerPoliciesForBackendServerOutput*&gt; *)setLoadBalancerPoliciesForBackendServer:(AWSElasticLoadBalancingSetLoadBalancerPoliciesForBackendServerInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the SetLoadBalancerPoliciesForBackendServer service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of AWSTask. On successful execution, task.result will contain an instance of AWSElasticLoadBalancingSetLoadBalancerPoliciesForBackendServerOutput. On failed execution, task.error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorAccessPointNotFound, AWSElasticLoadBalancingErrorPolicyNotFound, AWSElasticLoadBalancingErrorInvalidConfigurationRequest.</Abstract></ReturnValue>
			<Anchor>//api/name/setLoadBalancerPoliciesForBackendServer:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/setLoadBalancerPoliciesForBackendServer:completionHandler:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Replaces the set of policies associated with the specified port on which the EC2 instance is listening with a new set of policies. At this time, only the back-end server authentication policy type can be applied to the instance ports; this policy type is composed of multiple public key policies.&lt;/p&gt;&lt;p&gt;Each time you use &lt;code&gt;SetLoadBalancerPoliciesForBackendServer&lt;/code&gt; to enable the policies, use the &lt;code&gt;PolicyNames&lt;/code&gt; parameter to list the policies that you want to enable.&lt;/p&gt;&lt;p&gt;You can use &lt;a&gt;DescribeLoadBalancers&lt;/a&gt; or &lt;a&gt;DescribeLoadBalancerPolicies&lt;/a&gt; to verify that the policy is associated with the EC2 instance.&lt;/p&gt;&lt;p&gt;For more information about enabling back-end instance authentication, see Configure Proxy Protocol Support in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingSetLoadBalancerPoliciesForBackendServerInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingSetLoadBalancerPoliciesForBackendServerOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)setLoadBalancerPoliciesForBackendServer:(AWSElasticLoadBalancingSetLoadBalancerPoliciesForBackendServerInput *)request completionHandler:(void ( ^ _Nullable ) ( AWSElasticLoadBalancingSetLoadBalancerPoliciesForBackendServerOutput *_Nullable response , NSError *_Nullable error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the SetLoadBalancerPoliciesForBackendServer service method.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">The completion handler to call when the load request is complete.
                          response - A response object, or nil if the request failed.
                          error - An error object that indicates why the request failed, or nil if the request was successful. On failed execution, error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorAccessPointNotFound, AWSElasticLoadBalancingErrorPolicyNotFound, AWSElasticLoadBalancingErrorInvalidConfigurationRequest.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setLoadBalancerPoliciesForBackendServer:completionHandler:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/setLoadBalancerPoliciesOfListener:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Replaces the current set of policies for the specified load balancer port with the specified set of policies.&lt;/p&gt;&lt;p&gt;To enable back-end server authentication, use &lt;a&gt;SetLoadBalancerPoliciesForBackendServer&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;For more information about setting policies, see Application-Controlled Session Stickiness in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingSetLoadBalancerPoliciesOfListenerInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingSetLoadBalancerPoliciesOfListenerOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (AWSTask&lt;AWSElasticLoadBalancingSetLoadBalancerPoliciesOfListenerOutput*&gt; *)setLoadBalancerPoliciesOfListener:(AWSElasticLoadBalancingSetLoadBalancerPoliciesOfListenerInput *)request</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the SetLoadBalancerPoliciesOfListener service method.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An instance of AWSTask. On successful execution, task.result will contain an instance of AWSElasticLoadBalancingSetLoadBalancerPoliciesOfListenerOutput. On failed execution, task.error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorAccessPointNotFound, AWSElasticLoadBalancingErrorPolicyNotFound, AWSElasticLoadBalancingErrorListenerNotFound, AWSElasticLoadBalancingErrorInvalidConfigurationRequest.</Abstract></ReturnValue>
			<Anchor>//api/name/setLoadBalancerPoliciesOfListener:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSElasticLoadBalancing/setLoadBalancerPoliciesOfListener:completionHandler:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Replaces the current set of policies for the specified load balancer port with the specified set of policies.&lt;/p&gt;&lt;p&gt;To enable back-end server authentication, use &lt;a&gt;SetLoadBalancerPoliciesForBackendServer&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;For more information about setting policies, see Application-Controlled Session Stickiness in the &lt;i&gt;Classic Load Balancers Guide&lt;/i&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSElasticLoadBalancingService.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingSetLoadBalancerPoliciesOfListenerInput</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cl/AWSElasticLoadBalancingSetLoadBalancerPoliciesOfListenerOutput</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)setLoadBalancerPoliciesOfListener:(AWSElasticLoadBalancingSetLoadBalancerPoliciesOfListenerInput *)request completionHandler:(void ( ^ _Nullable ) ( AWSElasticLoadBalancingSetLoadBalancerPoliciesOfListenerOutput *_Nullable response , NSError *_Nullable error ))completionHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>request</Name>
					<Abstract type="html">A container for the necessary parameters to execute the SetLoadBalancerPoliciesOfListener service method.</Abstract>
				</Parameter><Parameter>
					<Name>completionHandler</Name>
					<Abstract type="html">The completion handler to call when the load request is complete.
                          response - A response object, or nil if the request failed.
                          error - An error object that indicates why the request failed, or nil if the request was successful. On failed execution, error may contain an NSError with AWSElasticLoadBalancingErrorDomain domain and the following error code: AWSElasticLoadBalancingErrorAccessPointNotFound, AWSElasticLoadBalancingErrorPolicyNotFound, AWSElasticLoadBalancingErrorListenerNotFound, AWSElasticLoadBalancingErrorInvalidConfigurationRequest.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setLoadBalancerPoliciesOfListener:completionHandler:</Anchor>
            <NodeRef refid="959"/>
		</Token>
		
        
        
	</File>
</Tokens>